#!/bin/bash -e
# ========================================================================
# Copyright (c) 2014-2016 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# Script to set up a complete Riak CS development environment.
#
# It DOES seek confirmation that you know what you're about to do, but once
# you confirm it can do a LOT of damage, so be sure!
#
# Errors:
# - If any command experiences an error, the script will stop dead wherever
#   it is and exit. It has no recovery capability, so it goes through the
#   entire sequence on every run, by design.
# - Other than command errors, the other thing that will stop it short of
#   completion is an existing target source directory that contains uncommitted
#   changes, but it may do a lot of work before it gets to it, so you're wise
#   to confirm beforehand.
#
# Notes:
# - You DEFINITELY want to review what's in 'old_srcs', as they'll be
#   deleted mercilessly!
# - You'll almost certainly have to change the 'curr_otp_activate' and
#   'prev_otp_activate' paths.
# - Unless you're planning to go overboard on testing, you'll probably
#   want to unset 'db_alt'.
#
# Programming:
# - The script relies heavily on the '-e' option in the interpreter directive
#   to bail out at the first hint of trouble. If you run explicitly under the
#   shell, such as for tracing/debugging, be sure to include it on your
#   command line.
# - Variables with very short names should never be counted on outside the
#   block where they're used.
#
# ToDo:
# - Maybe support strictly open-source builds at some point, so people outside
#   Basho can use it. Not a high priority while I work for Basho ;)
#

#
# Current and previous versions for testing.
# These will all be built locally.
# Generally, X.Y is interpretted as a branch, and X.Y.Z... is interpretted as
# a tag. This matters for riak[_ee], where tags get the repo name prefixed.
# Note that versions with a non-numeric character immediately following a '.'
# have the potential to wreak havoc on directory names - hopefully these will
# never occur in Basho repos.
#
readonly  cs_vers='2.1'
readonly  db_vers='2.1'
readonly  st_vers='2.1'

readonly  cs_prev='1.5.4p1'
readonly  db_prev='1.4.12'
readonly  st_prev='1.5.0'

#
# If "$db_alt" is set, it should refer to another version of Riak [EE] that's
# [mostly] compatible with CS version $cs_vers, to be used for testing.
#
readonly  db_alt='2.0'

#
# How many elements of a repo's version to use as a directory name suffix.
# Leading 'xxx-' and trailing non-numeric characters are stripped, so if
# "$xy_vers" == 'xytag-3.4.5rc6' and "$suffix_elems" == '3', the result of
# `vers_suffix $xy_vers` would be '3.4.5'. If you want some other
# transformation, you'll have to edit the vers_suffix() function definition.
#
readonly  suffix_elems=2

#
# Change to 'master' once 'basho-trb-node_package-change' is merged.
# It would be nice to match this to the Riak version, but the CS harness
# uses features only in the master branch as of now.
#
readonly  rt_spec='basho-trb-node_package-change'

#
# Which OTP builds to use.
# Note that webmachine breaks if you build the 'previous' OTP from either
# the OTP_R15B01_basho1 tag or the head of the basho-otp-15 branch, use tag
# basho_OTP_R15B01p instead.
#
readonly  curr_otp_activate='/opt/basho/otp-16-b10/activate'
readonly  prev_otp_activate='/opt/basho/otp-15-p1/activate'

#
# Old source directories that will be DELETED ENTIRELY if found.
#
readonly  old_srcs='riak riak_ee riak_cs stanchion'

#
# About this script.
#
readonly  sdir="$(cd "$(dirname "$0")" && pwd)"
readonly  sname="${0##*/}"
readonly  spath="$sdir/$sname"

#
# Assorted constants.
#
readonly  eq_delim='========================'
readonly  os_type="$(uname -s)"
readonly  rt_roots='riak riak_ee riak_cs_os riak_cs_ee stanchion'

#
# Unset some variables that could alter expected behavior.
# Some of these could potentially be set to known values later.
# Keep track of what we want to export/display before the user confirms.
# 'display_vars' are whitespace-separated EREs and should contain at least
# everything unset below.
# 'export_vars' can only be whitespace-separeated whole variable names.
#
unset CPPFLAGS DEVNODES ERL_LIBS MAKEFLAGS RIAK_CS_EE_DEPS
display_vars='CPPFLAGS DEVNODES ERL_LIBS MAKEFLAGS RIAK_CS_EE_DEPS'
display_vars+=' LANG LC_[[:alnum:]_]+ LD PATH'
export_vars=''

#
# Make sure we have some tools working the way we expect before bugging
# the user about whether they want to proceed.
#

# start by making sure they're not aliases, because they wreak havoc
# on trying to find actual executable programs
unalias egrep git gmake make 2>/dev/null || true
unalias cc clang c++ gcc g++ icc 2>/dev/null || true

[[ -n "$LANG" ]] || LANG='C'
export_vars+=' LANG'
if [[ -z "$ECP" ]]
then
    if [[ "$os_type" == 'Darwin' ]]
    then
        ECP='/bin/cp -pX'
    else
        ECP='/bin/cp -p'
    fi
fi
export_vars+=' ECP'
[[ -n "$EGREP" ]] || EGREP="$(type -p egrep || echo egrep)"
export_vars+=' EGREP'
if [[ -z "$ESED" ]]
then
    if [[ "$os_type" == 'Linux' ]]
    then
        ESED='/usr/bin/sed -r'
    else
        ESED='/usr/bin/sed -E'
    fi
fi
export_vars+=' ESED'
[[ -n "$GIT" ]] || GIT="$(type -p git || echo git)"
export_vars+=' GIT'
if [[ -z "$MAKE" ]]
then
    case "$os_type" in
        Darwin|Linux)
            MAKE="$(type -p /usr/bin/make \
                || type -p make || type -p gmake || echo make)"
            ;;
        *)
            MAKE="$(type -p gmake || type -p make || echo gmake)"
            ;;
    esac
fi
export_vars+=' MAKE'

LDFLAGS='-g -O3'
export_vars+=' LDFLAGS'
case ""$os_type"" in
    Darwin)
        LDFLAGS="-arch x86_64 $LDFLAGS"
        ccands='/usr/bin/cc gcc cc'
        cccands='/usr/bin/c++ g++ c++'
        ;;
    Linux)
        ccands='gcc cc'
        cccands='g++ gcc c++'
        ;;
    *BSD)
        ccands='clang39 clang38 clang37 /usr/bin/cc gcc cc'
        cccands='/usr/bin/c++ g++ c++'
        ;;
    *)
        ccands='cc gcc'
        cccands='c++ g++ gcc'
        ;;
esac

CFLAGS="-m64 -march=native -mcx16 $LDFLAGS"
CXXFLAGS="$CFLAGS"
export_vars+=' CFLAGS CXXFLAGS'

for c in icc $ccands $CC
do
    CC="$(type -p $c || true)"
    [[ -z "$CC" ]] || break
done
if [[ -z "$CC" ]]
then
    echo "$sname: error: no C compiler found!" >&2
    exit 2
fi
export_vars+=' CC CXX'
if [[ "${CC##*/}" == icc || "${CC##*/}" == clang* ]]
then
    CXX="$CC"
else
    for c in $cccands $CC
    do
        CXX="$(type -p $c || true)"
        [[ -z "$CXX" ]] || break
    done
fi
unset c ccand cccand

CCC="$CXX"
CCFLAGS="$CXXFLAGS"
export_vars+=' CCC CCFLAGS'

# clean up before using them so the substitutions to make them into an ERE
# do the right thing
while [[ "$display_vars" == \ * || "$display_vars" == *\  ]]
do
    display_vars="${display_vars# }"
    display_vars="${display_vars% }"
done
while [[ "$export_vars" == \ * || "$export_vars" == *\  ]]
do
    export_vars="${export_vars# }"
    export_vars="${export_vars% }"
done

export  $export_vars

# display what we'll be using
echo $eq_delim
echo \* Relevant Environment:
env | $EGREP "^(${display_vars// /|}|${export_vars// /|})=" | sort

unset display_vars export_vars
#
# environment setup done
#

#
# common operations on tag/branch/version identifiers
#
is_tag()
{
    [[ -n "$(cut -d. -f3 <<<"$1")" ]]
}
vers_suffix()
{
    local ver="$(cut -d. -f1-$suffix_elems <<<"${1#*-}")"
    # if the last element doesn't start with a number, the result is going to
    # be funky, but that would mean the version was pretty bogus to start with
    echo "${ver%%[^0-9]*}"
}

#
# Make sure the kerl-ish 'activate' scripts are present, working, and the
# right versions before harrassing the user about whether to continue.
# Tell them all their problems up front.
#
echo $eq_delim
err=0
for rec in "15/$prev_otp_activate"  "16/$curr_otp_activate"
do
    act="${rec#*/}"
    ver="${rec%%/*}"
    if [[ $ver -eq 15 ]]
    then
        csn="Riak CS $(vers_suffix "$cs_prev")"
    else
        csn="Riak CS $(vers_suffix "$cs_vers")"
    fi
    if [[ ! -f "$act" ]]
    then
        echo "$sname: error: '$act' not found" >&2
        err=2
    elif ! . "$act"
    then
        echo "$sname: error: '$act' didn't load successfully" >&2
        err=2
    else
        rel="$(erl -noshell -eval \
            'erlang:display(erlang:system_info(otp_release)), halt().' | \
            /usr/bin/cut '-d"' -f2)"
        case "$ver/$rel" in
            15/R15B01|15/R15B0[23]*|16/R16B0[23]_basho1[0-9])
                echo \* $csn will use $rel
                ;;
            16/R16B02_basho[789])
                echo \* $csn will use $rel
                echo \* R16B02_basho10 or above is recommended.
                ;;
            16/R16B0[23]|16/R16B03-1)
                echo \* $csn will use $rel
                echo \* This should work, \
                    but R16B02_basho10 or above is recommended.
                ;;
            15/*)
                echo $sname: error: $csn does not support $rel >&2
                [[ "$rel" == R15B01?* ]] || \
                    echo \* Use R15 at R15B01 or above. >&2
                echo \* Releases of R15B01 with a suffix cause the version \
                    of webmachine used by $csn to build incorrectly. >&2
                echo \* To use a Basho version of R15, use \
                    basho_OTP_R15B01p, NOT the head of the basho-otp-15 \
                    branch or OTP_R15B01_basho1. >&2
                err=2
                ;;
            16/*)
                echo $sname: error: $csn does not support $rel >&2
                echo \* R16 at R16B02_basho10 or above is recommended. >&2
                err=2
                ;;
        esac
    fi
done
# if this is going to cause a problem, let it kill the script now
kerl_deactivate
[[ $err -eq 0 ]] || exit $err
unset act csn err rel ver

case $# in
    0)
        if [[ -n "$CS_TOP_DIR" && "$(cd "$CS_TOP_DIR" && pwd)" != "$(pwd)" ]]
        then
            echo $sname: error: too scary - \
                CS_TOP_DIR is set but is not the current directory. >&2
            exit 1
        fi
        ;;
    1)
        if [[ ! -d "$1" ]]
        then
            echo "$sname: error: '$1' is not a directory." >&2
            exit 2
        fi
        cd "$1"
        ;;
    *)
        echo "Usage: $sname [CS-environment-top-dir]" >&2
        exit 1
        ;;
esac

CS_TOP_DIR="$(pwd)"
RT_TOP_DIR="$CS_TOP_DIR/rt"
RT_CONFIG="$CS_TOP_DIR/rt.config"

echo $eq_delim
printf 'You are about to blow away most everything under\n\t%s\n' "$CS_TOP_DIR"
unset REPLY
while read -p 'Are you SURE? [y/n]: '
do
    case "$REPLY" in
        [yY]|[yY][eE][sS])
            break
            ;;
        [nN]|[nN][oO])
            echo 'Destruction cancelled, you wimp'
            exit 0
            ;;
    esac
done
echo Ok, then ...
echo $eq_delim

#
# safe_repo_rm fully-qualified-path
#
safe_repo_rm()
{
    local dir="$1"

    if [[ -d "$dir" ]]
    then
        if [[ -d "$dir/.git" ]]
        then
            cd "$dir"
            if [[ $($GIT status -s | wc -l) -ne 0 ]]
            then
                echo "$sname: error: uncomitted changes in '$dir'" >&2
                exit 3
            fi
            cd "$CS_TOP_DIR"
        fi
        /bin/rm -rf "$dir"
    fi
}

#
# init_repo_version otp-activate repo vers-spec dest-dir
#
init_source_repo()
{
    local act="$1"
    local rep="$2"
    local ver="$3"
    local dir="$4"

    printf '%s\n*** Initializing %s ...\n' "$eq_delim" "$dir"
    
    cd "$CS_TOP_DIR"
    safe_repo_rm "$dir"
    $GIT clone -b "$ver" "git@github.com:basho/$rep.git" "$dir"

    . "$act"
    cd "$dir"
    if is_tag "$ver" \
    && $EGREP -q '^[[:space:]]*locked-deps[[:space:]:]' Makefile
    then
        $MAKE locked-deps
    else
        $MAKE deps
    fi
    cd "$CS_TOP_DIR"

    printf '*** Done.\n%s\n' "$eq_delim"
}

#
# init_test_build otp-activate source-dir test-dir
#
init_test_build()
{
    local act="$1"
    local src="$2"
    local tst="$3"

    . "$act"
    cd "$src"

    printf '%s\n*** Using %s\n*** Building %s ...\n' \
        "$eq_delim" "$(dirname "$(dirname "$(type -p erl)")")" "$src"
    
    if $EGREP -q '^([^#]*[[:space:]:])?stagedevrel[[:space:]:]' Makefile
    then
        $MAKE stagedevrel
    else
        $MAKE devrel
    fi

    printf '*** Done.\n%s\n*** Installing %s ...\n' "$eq_delim" "$tst"

    /bin/rm -rf "$tst"
    /bin/mkdir -p "$tst"
    $ECP -PR "$src/dev" "$tst/dev"
    $GIT describe --tags >"$tst/VERSION"

    printf '*** Done.\n%s\n' "$eq_delim"
    cd "$CS_TOP_DIR"
}

#
# init_repo_version repo current-version previous-version
#
init_repo_version()
{
    local repo="$1"
    local curr_vers="$2"
    local prev_vers="$3"

    local curr_suff="$(vers_suffix "$curr_vers")"
    local prev_suff="$(vers_suffix "$prev_vers")"

    if [[ "$repo" = 'riak' || "$repo" = 'riak_ee' ]]
    then
        if is_tag "$curr_vers"
        then
            local curr_spec="$repo-$curr_vers"
        else
            local curr_spec="$curr_vers"
        fi
        if is_tag "$prev_vers"
        then
            local prev_spec="$repo-$prev_vers"
        else
            local prev_spec="$prev_vers"
        fi
    else
        local curr_spec="$curr_vers"
        local prev_spec="$prev_vers"
    fi
    local curr_src_dir="$CS_TOP_DIR/$repo-$curr_suff"
    local prev_src_dir="$CS_TOP_DIR/$repo-$prev_suff"

    if [[ "$repo" = 'riak_cs' ]]
    then
        init_source_repo "$repo" "$prev_spec" "$prev_src_dir"
        init_source_repo "$repo" "$curr_spec" "$curr_src_dir"
        init_test_build "$prev_otp_activate" "$prev_src_dir" "$RT_TOP_DIR/${repo}_os/$prev_suff"
        init_test_build "$curr_otp_activate" "$curr_src_dir" "$RT_TOP_DIR/${repo}_os/$curr_suff"
        export  RIAK_CS_EE_DEPS='true'
        init_source_repo "$repo" "$prev_spec" "$prev_src_dir"
        init_source_repo "$repo" "$curr_spec" "$curr_src_dir"
        init_test_build "$prev_otp_activate" "$prev_src_dir" "$RT_TOP_DIR/${repo}_ee/$prev_suff"
        init_test_build "$curr_otp_activate" "$curr_src_dir" "$RT_TOP_DIR/${repo}_ee/$curr_suff"
        unset   RIAK_CS_EE_DEPS
    else
        init_source_repo "$repo" "$prev_spec" "$prev_src_dir"
        init_source_repo "$repo" "$curr_spec" "$curr_src_dir"
        init_test_build "$prev_otp_activate" "$prev_src_dir" "$RT_TOP_DIR/$repo/$prev_suff"
        init_test_build "$curr_otp_activate" "$curr_src_dir" "$RT_TOP_DIR/$repo/$curr_suff"
    fi
}

if [[ -n "$old_srcs" ]]
then
    for dir in $old_srcs
    do
        safe_repo_rm "$CS_TOP_DIR/$dir"
    done
fi

for dir in $rt_roots
do
    [[ -d "$RT_TOP_DIR/$dir/.git" ]] || continue
    cd "$RT_TOP_DIR/$dir"
    $GIT reset --hard -q HEAD
    $GIT clean -f -f -dq
    /bin/rm -rf "$RT_TOP_DIR/$dir/.git"
done

init_repo_version riak      "$db_vers" "$db_prev"
init_repo_version riak_ee   "$db_vers" "$db_prev"
init_repo_version riak_cs   "$cs_vers" "$cs_prev"
init_repo_version stanchion "$st_vers" "$st_prev"

if [[ -n "$db_alt" ]]
then
    suff="$(cut -d. -f1,2 <<<"$db_alt")"
    for repo in riak riak_ee
    do
        if [[ -n "$(cut -d. -f3 <<<"$db_alt")" ]]
        then
            spec="$repo-$db_alt"
        else
            spec="$db_alt"
        fi
        init_source_repo "$repo" "$spec" "$CS_TOP_DIR/$repo-$suff"
        init_test_build "$curr_otp_activate" "$CS_TOP_DIR/$repo-$suff" "$RT_TOP_DIR/$repo/$suff"
    done
fi

safe_repo_rm "$CS_TOP_DIR/riak_test"
$GIT clone -b "$rt_spec" \
    'git@github.com:basho/riak_test.git' "$CS_TOP_DIR/riak_test"
cd "$CS_TOP_DIR/riak_test"
$MAKE

for dir in $rt_roots
do
    [[ -d "$RT_TOP_DIR/$dir" ]] || continue
    cd "$RT_TOP_DIR/$dir"
    [[ ! -d current ]] || /bin/rm -rf current
    $GIT init
    $GIT add -A *
    $GIT commit -q -m 'riak_test init'
done

cd "$CS_TOP_DIR"

CS_SRC_ROOT="$CS_TOP_DIR/riak_cs-$(vers_suffix "$cs_vers")"
cat >"$RT_CONFIG" <<EOF
%%
%% riak_test configuration for Riak CS
%%

{default, [
    {rt_max_wait_time,  60000},
    {rt_retry_delay,    500},

    {rt_project,        "riak_cs"},
    {rt_harness,        rtcs_dev},
    {rt_deps,           ["$CS_SRC_ROOT/deps"]},
    {test_paths,        ["$CS_SRC_ROOT/riak_test/ebin"]},
    {src_paths,         [
        {cs_src_root,       "$CS_SRC_ROOT"}
    ]},
    {build_paths,       [
        {root,              "$RT_TOP_DIR/riak"},
        {current,           "$RT_TOP_DIR/riak/$(vers_suffix "$db_vers")"},
        {previous,          "$RT_TOP_DIR/riak/$(vers_suffix "$db_prev")"},
        {ee_root,           "$RT_TOP_DIR/riak_ee"},
        {ee_current,        "$RT_TOP_DIR/riak_ee/$(vers_suffix "$db_vers")"},
        {ee_previous,       "$RT_TOP_DIR/riak_ee/$(vers_suffix "$db_prev")"},
        {cs_root,           "$RT_TOP_DIR/riak_cs_ee"},
        {cs_current,        "$RT_TOP_DIR/riak_cs_ee/$(vers_suffix "$cs_vers")"},
        {cs_previous,       "$RT_TOP_DIR/riak_cs_ee/$(vers_suffix "$cs_prev")"},
        {stanchion_root,    "$RT_TOP_DIR/stanchion"},
        {stanchion_current, "$RT_TOP_DIR/stanchion/$(vers_suffix "$st_vers")"},
        {stanchion_previous,"$RT_TOP_DIR/stanchion/$(vers_suffix "$st_prev")"}
    ]},
    {lager_level,       debug},
    {backend,           {multi_backend, bitcask}},
    %
    % just so it's fully-formed for when I forget to point at an explicit config
    % this is effectively the 'cs_ee' configuration
    %
    {build_type,        ee},
    {flavor,            basic}
]}.

{cs_ee, [
    {build_type,        ee},
    {flavor,            basic}
]}.

{cs_ee_mb, [
    {build_type,        ee},
    {flavor,            {multibag, disjoint}}
]}.

{cs_os, [
    {build_type,        oss},
    {flavor,            basic},
    {build_paths,       [
        {root,              "$RT_TOP_DIR/riak"},
        {current,           "$RT_TOP_DIR/riak/$(vers_suffix "$db_vers")"},
        {previous,          "$RT_TOP_DIR/riak/$(vers_suffix "$db_prev")"},
        {ee_root,           "$RT_TOP_DIR/riak_ee"},
        {ee_current,        "$RT_TOP_DIR/riak_ee/$(vers_suffix "$db_vers")"},
        {ee_previous,       "$RT_TOP_DIR/riak_ee/$(vers_suffix "$db_prev")"},
        {cs_root,           "$RT_TOP_DIR/riak_cs_os"},
        {cs_current,        "$RT_TOP_DIR/riak_cs_os/$(vers_suffix "$cs_vers")"},
        {cs_previous,       "$RT_TOP_DIR/riak_cs_os/$(vers_suffix "$cs_prev")"},
        {stanchion_root,    "$RT_TOP_DIR/stanchion"},
        {stanchion_current, "$RT_TOP_DIR/stanchion/$(vers_suffix "$st_vers")"},
        {stanchion_previous,"$RT_TOP_DIR/stanchion/$(vers_suffix "$st_prev")"}
    ]}
]}.
EOF

[[ -n "$db_alt" ]] || exit 0

cat >>"$RT_CONFIG" <<EOF

{cs_alt_ee, [
    {build_type,        ee},
    {flavor,            basic},
    {build_paths,       [
        {root,              "$RT_TOP_DIR/riak"},
        {current,           "$RT_TOP_DIR/riak/$(vers_suffix "$db_alt")"},
        {previous,          "$RT_TOP_DIR/riak/$(vers_suffix "$db_prev")"},
        {ee_root,           "$RT_TOP_DIR/riak_ee"},
        {ee_current,        "$RT_TOP_DIR/riak_ee/$(vers_suffix "$db_alt")"},
        {ee_previous,       "$RT_TOP_DIR/riak_ee/$(vers_suffix "$db_prev")"},
        {cs_root,           "$RT_TOP_DIR/riak_cs_ee"},
        {cs_current,        "$RT_TOP_DIR/riak_cs_ee/$(vers_suffix "$cs_vers")"},
        {cs_previous,       "$RT_TOP_DIR/riak_cs_ee/$(vers_suffix "$cs_prev")"},
        {stanchion_root,    "$RT_TOP_DIR/stanchion"},
        {stanchion_current, "$RT_TOP_DIR/stanchion/$(vers_suffix "$st_vers")"},
        {stanchion_previous,"$RT_TOP_DIR/stanchion/$(vers_suffix "$st_prev")"}
    ]}
]}.

{cs_alt_ee_mb, [
    {build_type,        ee},
    {flavor,            {multibag, disjoint}},
    {build_paths,       [
        {root,              "$RT_TOP_DIR/riak"},
        {current,           "$RT_TOP_DIR/riak/$(vers_suffix "$db_alt")"},
        {previous,          "$RT_TOP_DIR/riak/$(vers_suffix "$db_prev")"},
        {ee_root,           "$RT_TOP_DIR/riak_ee"},
        {ee_current,        "$RT_TOP_DIR/riak_ee/$(vers_suffix "$db_alt")"},
        {ee_previous,       "$RT_TOP_DIR/riak_ee/$(vers_suffix "$db_prev")"},
        {cs_root,           "$RT_TOP_DIR/riak_cs_ee"},
        {cs_current,        "$RT_TOP_DIR/riak_cs_ee/$(vers_suffix "$cs_vers")"},
        {cs_previous,       "$RT_TOP_DIR/riak_cs_ee/$(vers_suffix "$cs_prev")"},
        {stanchion_root,    "$RT_TOP_DIR/stanchion"},
        {stanchion_current, "$RT_TOP_DIR/stanchion/$(vers_suffix "$st_vers")"},
        {stanchion_previous,"$RT_TOP_DIR/stanchion/$(vers_suffix "$st_prev")"}
    ]}
]}.

{cs_alt_os, [
    {build_type,        oss},
    {flavor,            basic},
    {build_paths,       [
        {root,              "$RT_TOP_DIR/riak"},
        {current,           "$RT_TOP_DIR/riak/$(vers_suffix "$db_alt")"},
        {previous,          "$RT_TOP_DIR/riak/$(vers_suffix "$db_prev")"},
        {ee_root,           "$RT_TOP_DIR/riak_ee"},
        {ee_current,        "$RT_TOP_DIR/riak_ee/$(vers_suffix "$db_alt")"},
        {ee_previous,       "$RT_TOP_DIR/riak_ee/$(vers_suffix "$db_prev")"},
        {cs_root,           "$RT_TOP_DIR/riak_cs_os"},
        {cs_current,        "$RT_TOP_DIR/riak_cs_os/$(vers_suffix "$cs_vers")"},
        {cs_previous,       "$RT_TOP_DIR/riak_cs_os/$(vers_suffix "$cs_prev")"},
        {stanchion_root,    "$RT_TOP_DIR/stanchion"},
        {stanchion_current, "$RT_TOP_DIR/stanchion/$(vers_suffix "$st_vers")"},
        {stanchion_previous,"$RT_TOP_DIR/stanchion/$(vers_suffix "$st_prev")"}
    ]}
]}.
EOF
