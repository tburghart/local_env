#
# Shared Basho environment setup
#
# Assume this is being sourced by bash, so BASH_SOURCE[0] is this file,
# BASH_SOURCE[1] is the file that sourced this one, etc...
#
# By convention, environment variables that are recognized and passed
# between setup files start with env_, are not readonly, and are not
# exported. Recognized variables are:
#
#   env_erlang, if set, is the name of a kerl erlang build to use in
#   the current environment.
#   If/once $erlang_dir is set, this value is ignored.
#
#   erlang_dir, if set, is the path to a directory containing 'bin'
#   and 'lib' directories that contain an ERTS.
#   If not set, it is derived from $env_erlang, which MUST then be set.
#
#   env_rt_work, if set, overrides the default location of the instances
#   to be used by riak_test. If not set, it is set to $HOME/rt/riak.
#   
#   env_ee_path is the riak_ee directory, either fully qualified or
#   below $HOME/prj/basho. It will be made fully qualified.
#
#   env_rt_path is the riak_test directory, either fully qualified or
#   below $HOME/prj/basho. It will be made fully qualified.
#
#   env_rt_name is the subdirectory of $env_rt_work where $env_ee_path
#   builds are installed for testing.
#
#   env_rt_conf is the riak_test config label to be used for tests.
#
#   env_reset_unalias, env_reset_unset, env_reset_unsetf, if set, will be
#   parameters to 'unalias', 'unset', and 'unset -f', respectively during
#   reset_lenv() cleanup.
#

env_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

if [[ -n "$erlang_dir" ]]
then
    [[ "$erlang_dir" == /* ]] || erlang_dir="$(cd "$erlang_dir" && pwd)"

elif [[ -n "$env_erlang" ]]
then
    erlang_dir="/opt/erlangs/$env_erlang"
fi
if [[ -n "$erlang_dir" ]]
then
    if [[ ! -d "$erlang_dir" ]]
    then
        echo "error: ${BASH_SOURCE[0]##*/}: Erlang directory '$erlang_dir' not found." >&2
        return 2
    fi
    if [[ -f "$erlang_dir/activate" ]]
    then
        . "$erlang_dir/activate"
    else
        [[ -z "$(type -t kerl_deactivate)" ]] || kerl_deactivate
        export ERL_TOP="$erlang_dir"
        export  _KERL_PATH_REMOVABLE="$ERL_TOP/bin"
        export  PATH="$_KERL_PATH_REMOVABLE:${PATH//${_KERL_PATH_REMOVABLE}:/}"
        kerl_deactivate()
        {
            export  PATH="${PATH//${_KERL_PATH_REMOVABLE}:/}"
            unset   ERL_TOP _KERL_PATH_REMOVABLE
            hash    -r
            unset   -f kerl_deactivate
        }
        hash -r
    fi
fi
[[ -n "$env_rt_work" ]] || env_rt_work="$HOME/rt/riak"

export DEVNODES=12
env_reset_unset+=' DEVNODES'

env_ee_devs="$env_ee_path/dev"
env_rt_devs="$env_rt_work/$env_rt_name/dev"
env_rt_vers="$env_rt_work/$env_rt_name/VERSION"

reset_head="$GIT --git-dir=$env_rt_work/.git --work-tree=$env_rt_work reset HEAD --hard"
reset_clean="$GIT --git-dir=$env_rt_work/.git --work-tree=$env_rt_work clean -fd"
clean_rtdevs="/bin/rm -rf $env_rt_devs/dev*/data $env_rt_devs/dev*/log"

alias ee="cd $env_ee_path"
alias eever="$ESED -n 's/^.*\\{[[:space:]]*rel[[:space:]]*,[[:space:]]*\"riak\"[[:space:]]*,[[:space:]]*\"([0-9\.]+)\"[[:space:]]*,.*$/riak_ee-\1/p' $env_ee_path/rel/reltool.config"
alias nr="/bin/ls -1d $env_rt_devs/dev* | /usr/bin/wc -l"
alias rb="cd $env_rt_work"
alias rdeps="escript $HOME/prj/tedb/basho/erl_stuff/src/rebar_deps.erl"
alias reset="$reset_head && $reset_clean && $clean_rtdevs"
alias rsamp="cd $env_rt_path && ./riak_test -c $env_rt_conf -t repl_aae_fullsync"
alias rt="cd $env_rt_path"
alias rtci="cd $env_rt_work && $GIT commit -m $env_rt_name -a"
alias rtest="cd $env_rt_path && ./riak_test -c $env_rt_conf"
alias rtstat="cd $env_rt_work && $GIT status"
alias setrt="/bin/rm -rf $env_rt_devs && /usr/bin/ditto $env_ee_devs $env_rt_devs && $clean_rtdevs && printf \$(eever) >$env_rt_vers"
alias stage="cd $env_ee_path && $MAKE DEVNODES=$DEVNODES stagedevrel"
alias vclean="cd $env_ee_path && $MAKE clean ; cd deps/eleveldb && $MAKE clean ; cd $env_ee_path && /bin/rm -rf deps/*/.eunit"

alias menv="/usr/local/bin/mate $env_dir/env"
alias renv="reset_lenv && . $env_dir/env"
alias uenv='reset_lenv'

#
# variables passed in
#
unset env_dir env_ee_path env_erlang env_rt_conf env_rt_name env_rt_path erlang_dir
#
# generate this list:
#   $ESED -n 's/^([^=[:space:]]+)=.*$/\1/p' $HOME/prj/basho/local_env/env.basho.shared | egrep -v '^(env_rt_devs|env_rt_work)$' | sort -u | tr '\n' ' '; echo ''
#
unset clean_rtdevs env_dir env_ee_devs env_rt_vers reset_clean reset_head

devlogs()
{
    local d n
    case "$1" in
        [1-9] | [1-9][0-9] )
            d="dev$1"
            ;;
        dev[1-9] | dev[1-9][0-9] )
            d="$1"
            ;;
        * )
            echo "Unrecognized devN: '$1'" >&2
            return 1
            ;;
    esac
    for n in $env_rt_devs/$d/log/*
    do
        /usr/local/bin/mate -m "$d ${n##*/}" "$n"
    done
    unset d n
}

rstop()
{
    local n
    for n in $env_rt_devs/dev*/bin/riak
    do
        printf "$n stop: "
        $n stop
    done
    unset n
}

rstopa()
{
    local n
    for n in $env_rt_work/*/dev/dev*/bin/riak
    do
        printf "$n stop: "
        $n stop
    done
    unset n
}

s()
{
    ss

    echo '    devlogs N  edit .../devN/log/*'
    echo '    ee      cd to .../riak_ee directory'
    echo '    eever   print the riak_ee version string'
    echo '    nr      display count of riak instances'
    echo '    rb      cd to .../rt/riak directory'
    echo '    rdeps   escript rebar_deps'
    echo '    reset   reset rt environment'
    echo '    rsamp   rt -t repl_aae_fullsync'
    echo '    rstop   stop all riak instances'
    echo '    rstopa  stop ALL riak instances'
    echo '    rt      cd to .../riak_test directory'
    echo '    rtci    commit updated rt tree'
    echo '    rtest   cd .../riak_test && ./riak_test -c $conf'
    echo '    rtstat  cd .../rt/riak && git status'
    echo '    setrt   copy riak_ee/dev to rt/riak'
    echo '    stage   cd && make stagedevrel'
    echo '    vclean  cd && clean build (with brillo)'
    echo ''
}

#
# list aliases:
#   $ESED -n 's/^alias[[:space:]]+([^=]+)=.*$/\1/p' env | sort -u | tr '\n' ' '; echo ''
#
reset_lenv()
{
    [[ "$(typeof kerl_deactivate)" == 'undefined' ]] || kerl_deactivate

    if [[ -n "$env_reset_unsetf" ]]
    then
        unset -f "$env_reset_unsetf"
        unset env_reset_unsetf
    fi
    if [[ -n "$env_reset_unalias" ]]
    then
        unalias "$env_reset_unalias"
        unset env_reset_unalias
    fi
    if [[ -n "$env_reset_unset" ]]
    then
        unset "$env_reset_unset"
        unset env_reset_unset
    fi
    unset   env_rt_devs env_rt_work
    unalias ee eever nr rb rdeps reset rsamp rt rtci rtest rtstat setrt stage vclean
    unalias menv renv uenv
    unset   -f devlogs rstop rstopa s reset_lenv
}
