#
# Shared OTP environment setup
#
# Assume this is being sourced by bash, so BASH_SOURCE[0] is this file,
# BASH_SOURCE[1] is the file that sourced this one, etc...
#
# A few environment variables are recognized and/or required:
#
#   ERL_TOP SHOULD be set to the top of an Erlang/OTP source tree. If not
#   present, it is set to the current working directory.
#
#   otp_name MAY be set to the name of the directory under .../local
#   where the release will be installed.
#   If not set it is the basename of ERL_TOP.
#   Whether preset or not, it is unset after this file is sourced!
#
#   config_opts MAY be set to the options to be passed to ./configure
#   and its ilk.
#   If not set, an appropriate one is used.
#   Whether preset or not, it is unset after this file is sourced!
#
#   The following environment variables are unset if present:
#   MAKEFLAGS
#   
#   The following environment variables are set to basic values if not set:
#   CC CXX CFLAGS CXXFLAGS LDFLAGS LANG
#   
#   The following environment variables are unset during reset_lenv() cleanup:
#   ERL_TOP CC CXX CFLAGS CXXFLAGS LDFLAGS
#
#   env_reset_unalias, env_reset_unset, env_reset_unsetf, if set, will be
#   parameters to 'unalias', 'unset', and 'unset -f', respectively during
#   reset_lenv() cleanup.
#

env_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

[[ -z "$(type -t kerl_deactivate)" ]] || kerl_deactivate

[[ -n "$ERL_TOP" ]] || ERL_TOP="$(pwd)"

for d in bin bootstrap erts lib system
do
    if [[ ! -d "$ERL_TOP/$d" ]]
    then
        echo    "$sname error: '$ERL_TOP' doesn't look like an OTP build directory" >&2
        echo    "    * directory '$ERL_TOP/$d' is missing" >&2
        unset   d
        return  2
    fi
done
unset   d
export  ERL_TOP
unset   MAKEFLAGS

if [[ "$PATH" != "$ERL_TOP/bin":* ]]
then
    export PATH="$ERL_TOP/bin:$PATH"
    hash    -r
fi

kerl_deactivate()
{
    if [[ -n "$ERL_TOP" && "$PATH" == "$ERL_TOP/bin":* ]]
    then
        export  PATH="${PATH#${ERL_TOP}/bin:}"
        hash    -r
    fi
    unset   -f kerl_deactivate
}

. "$env_dir/otp.local.path"
. "$env_dir/otp.source.version"

[[ -n "$otp_name" ]] || otp_name="${ERL_TOP##*/}"

osx_ver="$(/usr/bin/sw_vers -productVersion | /usr/bin/cut -d. -f1,2)"
arch_flags="-arch x86_64 -march=native -m64 -mmacosx-version-min=$osx_ver"
if [[ -z "$CFLAGS" ]]
then
    CFLAGS="$arch_flags -O3"
    if [[ $otp_vsn_major -lt 17 ]]
    then
        CFLAGS+=' -Wno-deprecated-declarations'
        CFLAGS+=' -Wno-empty-body'
        CFLAGS+=' -Wno-implicit-function-declaration'
        CFLAGS+=' -Wno-parentheses-equality'
        CFLAGS+=' -Wno-pointer-sign'
        CFLAGS+=' -Wno-tentative-definition-incomplete-type'
        CFLAGS+=' -Wno-unused-function'
        CFLAGS+=' -Wno-unused-value'
        CFLAGS+=' -Wno-unused-variable'
    fi
fi
[[ -n "$CC" ]] || CC='/usr/bin/cc'
[[ -n "$CXX" ]] || CXX='/usr/bin/c++'
[[ -n "$CXXFLAGS" ]] || CXXFLAGS="$CFLAGS"
[[ -n "$LANG" ]] || LANG='C'
[[ -n "$LDFLAGS" ]] || LDFLAGS="$arch_flags -O4"

export  CC CXX CFLAGS CXXFLAGS LDFLAGS LANG

if [[ -z "$config_opts" ]]
then
    config_opts="--prefix $otp_local_path/$otp_name"
    config_opts+=' --enable-darwin-64bit --with-ssl --with-cocoa'
    #
    # Basho OTP-16+ has legal ODBC code, but ODBC is depracated after OS X 10.8
    #
    [[ "${osx_ver#*.}" -le 8 && $otp_vsn_major -ge 16 ]] \
        || config_opts+=' --without-odbc'
    #
    # OTP-15- 64-bit can't use wx, even 64-bit wx
    #
    [[ $otp_vsn_major -ge 16 ]] || config_opts+=' --without-wx'
    #
    # HiPE is not to be trusted on 64-bit OS X prior to ???
    #
    # [[ $otp_vsn_major -ge 17 ]] || config_opts+=' --disable-hipe'
    [[ $otp_vsn_major -gt 17 ]] || config_opts+=' --disable-hipe'
    #
    # Prior to OTP-17 the java docs won't build
    #
    [[ $otp_vsn_major -ge 17 ]] || config_opts+=' --without-javac'
    #
    # gs is deprecated as of OTP-17
    #
    [[ $otp_vsn_major -lt 17 ]] || config_opts+=' --without-gs'
    #
    # Yay for dirty schedulers!
    #
    [[ $otp_vsn_major -lt 17 ]] || config_opts+=' --enable-dirty-schedulers'
fi

build_log="$ERL_TOP/build.out.txt"

newer()
{
    echo 'Not implemented!'
}

run_build()
{
    local mf='-j5'
    cd "$ERL_TOP"
    /bin/date >"$build_log"
    echo "MAKEFLAGS=$mf" "$@" >>"$build_log"
    /usr/bin/tail -f "$build_log" &
    local tp=$!
    MAKEFLAGS="$mf" "$@" >>"$build_log"
    n=$?
    /bin/date >>"$build_log"
    kill "$tp"
    unset tp mf
    hash -r
    return $n
}

smoke()
{
    cd "$ERL_TOP"
    $MAKE tests
    cd 'release/tests/test_server'
    old_tz="$TZ"
    export TZ='MET'
    "$ERL_TOP/bin/erl" -s ts install -s ts smoke_test batch -s init stop
    if [[ -n "$old_tz" ]]
    then
        export TZ="$old_tz"
        unset old_tz
    else
        unset TZ old_tz
    fi
    cd "$ERL_TOP"
    open 'release/tests/test_server/index.html'
}

alias blog="m '$build_log'"
alias clean="cd '$ERL_TOP' && $MAKE clean && hash -r"
alias config="cd '$ERL_TOP' && ./otp_build configure $config_opts"
alias inst="cd '$ERL_TOP' && $env_dir/replace.otp $otp_name"
alias mkconf="cd '$ERL_TOP' && ./otp_build autoconf"
alias mkdocs="cd '$ERL_TOP' && $MAKE docs install-docs"
alias mkerl="run_build $MAKE"
alias mktest="cd '$ERL_TOP' && $MAKE tests"
alias setup="run_build ./otp_build setup -a $config_opts"
alias vclean="cd '$ERL_TOP' && /usr/bin/git clean -fdx -e /env -e /.idea/ -e '/*.iml' -e '/*.txt' && hash -r"

alias sslopts="cd '$ERL_TOP' && /usr/bin/egrep -Rlw '(sslv3|secure_renegotiate|honor_cipher_order|padding_check)' lib/ssl/doc/src lib/ssl/src lib/ssl/test"

unset   arch_flags config_opts env_dir osx_ver otp_local_path otp_name otp_release otp_vsn_major otp_vsn_minor

s()
{
    ss

    echo '    setup   otp_build setup -a ... >build-log'
    echo '    smoke   make & run smoke tests'
    echo '    inst    install/replace local installation'
    echo '    vclean  deep clean build'
    echo ''
    echo '    blog    open build-log'
    echo '    clean   cleanup build'
    echo '    config  otp_build configure ...'
    echo '    mkconf  otp_build autoconf'
    echo '    mkdocs  make & install docs'
    echo '    mkerl   make >build-log'
    echo '    mktest  make tests'
    echo '    newer   report whether source tree is newer than istallation'
    echo ''
    echo '    sslopts list files containing target ssl options'
    echo ''
}

reset_lenv()
{
    [[ "$(typeof kerl_deactivate)" == 'undefined' ]] || kerl_deactivate

    if [[ -n "$env_reset_unsetf" ]]
    then
        unset -f "$env_reset_unsetf"
        unset env_reset_unsetf
    fi
    if [[ -n "$env_reset_unalias" ]]
    then
        unalias "$env_reset_unalias"
        unset env_reset_unalias
    fi
    if [[ -n "$env_reset_unset" ]]
    then
        unset "$env_reset_unset"
        unset env_reset_unset
    fi
    unset   build_log ERL_TOP CC CXX CFLAGS CXXFLAGS LDFLAGS
    unalias config inst mkconf setup mkerl mktest clean vclean
    unset   -f run_build smoke s
}
