#
# Work with Riak CS
#

CS_TOP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
env_reset_unset+=' CS_TOP_DIR'
export CS_TOP_DIR

env_eq_delim='========================'
env_reset_unset+=' env_eq_delim'

if [[ -z "$CS_RUNNABLE" ]]
then
    CS_RUNNABLE='false'
    env_reset_unset+=' CS_RUNNABLE'
    export CS_RUNNABLE
fi

kerl_deactivate 2>/dev/null || true

if $CS_RUNNABLE
then
    env_reset_path="$PATH"
    env_reset_unset+=' env_reset_path'
fi
otp_15_base='/opt/basho/otp-15-p1'
otp_16_base='/opt/basho/otp-16-b10'
env_reset_unset+=' otp_15_base otp_16_base'

. "$otp_16_base/activate"

[[ "$(ulimit -n)" -ge 65536 ]] || ulimit -n 65536 2>/dev/null || true

if $CS_RUNNABLE
then
    PATH="$CS_TOP_DIR/stanchion/rel/stanchion/bin:$PATH"
    PATH="$CS_TOP_DIR/riak_ee/rel/riak/bin:$PATH"
    PATH="$CS_TOP_DIR/riak_cs/rel/riak-cs/bin:$PATH"
    export PATH
fi

RIAK_CS_EE_DEPS=true
env_reset_unset+=' RIAK_CS_EE_DEPS'
export RIAK_CS_EE_DEPS

# ugly hack for leveldb
EXCLUDE_OSX_RT_VERS_FLAG='true'
. "$LOCAL_ENV_DIR/env.tool.defaults"
unset EXCLUDE_OSX_RT_VERS_FLAG

foreach()
{
    if [[ $# -lt 1 || "$1" == -* ]]
    then
        echo 'Usage: foreach <commands>' >&2
        if [[ $# -gt 0 ]]
        then
            echo 'Executes <commands> in each of ee, stanchion, and cs source trees' >&2
            echo 'Commands are separated on whitespace, including embedded' >&2
        fi
        return 1
    fi
    local cwd="$(pwd)"
    local ret=0
    local dir tmp

    for dir in \
        "$CS_TOP_DIR/riak_ee" \
        "$CS_TOP_DIR/stanchion" \
        "$CS_TOP_DIR/riak_cs"
    do
        cd "$dir"
        printf '*** In %s\n' "$(pwd)"
        $*
        tmp=$?
        [[ $tmp -eq 0 ]] || ret=$tmp
    done

    cd "$cwd"
    return $ret
}
env_reset_unsetf+=' foreach'

update_ee_dev()
{
    local ee_etc="$1/etc"
    local cs_ebin="$2/ebin"
    local dir kv key tmp
    for dir in "$ee_etc" "$cs_ebin"
    do
        if [[ ! -d "$dir" ]]
        then
            echo "update_ee_dev: error: '$dir' is not a directory" >&2
            return 2
        fi
    done
    for kv in \
        'buckets.default.allow_mult = true' \
        'buckets.default.merge_strategy = 2' \
        'cs_version = 20100' \
        'storage_backend = prefix_multi'
    do
        key="${kv%%[ =]*}"
        key="${key//./\\.}"
        if egrep -q "^[[:space:]#]*${key}[[:space:]]*=" "$ee_etc/riak.conf"
        then
            $ESED -i "s/^[[:space:]#]*${key}[[:space:]]*=.*\$/${kv}/" "$ee_etc/riak.conf"
        else
            printf "# For Riak CS\\n${kv}\\n" >> "$ee_etc/riak.conf"
        fi
    done
    if egrep -q '^[[:space:]]*\{[[:space:]]*riak_kv[[:space:]]*,' "$ee_etc/advanced.config"
    then
        if egrep -q \
            '^[[:space:]]*\{[[:space:]]*add_paths[[:space:]]*,[[:space:]]*\["[^"]+/ebin"\]' \
            "$ee_etc/advanced.config"
        then
            $ESED -i \
                "s!^([[:space:]]*\\{[[:space:]]*add_paths[[:space:]]*,[[:space:]]*\\[\")[^\"]+/ebin(\"\\].*)\$!\1${cs_ebin}\2!" \
                "$ee_etc/advanced.config"
        else
            echo "update_ee_dev: error: can't grok '$ee_etc/advanced.config'" >&2
            return 3
        fi
    else
        tmp="$(mktemp /tmp/ac.XXXXXXX)"
        awk -v "cs_ebin=$cs_ebin" 'BEGIN { changed = 0 } {
            if ( NF == 1 && changed == 0 && $1 == "[" ) {
                printf("[\n {riak_kv, [\n  {add_paths, [\"%s\"]}\n ]},\n\n", cs_ebin)
                changed += 1
            } else print }' \
        "$ee_etc/advanced.config" > "$tmp"
        cat "$tmp" > "$ee_etc/advanced.config"
        rm -f "$tmp"
    fi
}
env_reset_unsetf+=' update_ee_dev'

alias update_ee_rel="update_ee_dev $CS_TOP_DIR/riak_ee/rel/riak $CS_TOP_DIR/riak_cs"
env_reset_unalias+=' update_ee_rel'

rt_setup_devrel()
{
    local source="$1"
    local rtroot="${2%/*}"
    local rtvers="${2##*/}"
    local current="$(pwd)"

    printf '%s\nUsing OTP: %s %s\n' \
        "$env_eq_delim" "$(which erl)" "$(which erlc)"

    printf "Building '%s' ...\\n%s\\n" "$source" "$env_eq_delim" \
    && cd "$source" \
    && $MAKE clean \
    && rm -rf dev \
    && $GIT clean -f -f -dqx \
        -e /env -e /env.local -e /.idea/ -e '*.iml' -e '/*.txt' \
    && $MAKE devrel \
    && \
    printf "%s\\nInstalling '%s' ...\\n" "$env_eq_delim" "$rtroot/$rtvers" \
    && cd "$rtroot" \
    && $GIT reset --hard -q HEAD \
    && $GIT clean -f -f -dq \
    && rm -rf "$rtvers/dev" \
    && cp -pPR "$source/dev" "$rtvers/dev" \
    && printf "$(cd "$source" && $GIT describe --tags)" > "$rtvers/VERSION" \
    && $GIT add -A "$rtvers" \
    && $GIT commit -q -m 'riak_test init' --amend "$rtvers" \
    && \
    printf 'Done.\n%s\n' "$env_eq_delim"

    local ret=$?
    cd "$current"
    return $ret
}
rt_setup()
{
    . "$otp_16_base/activate"

    rt_setup_devrel "$CS_TOP_DIR/riak" "$CS_TOP_DIR/rt/riak/current" \
    && \
    rt_setup_devrel "$CS_TOP_DIR/riak_ee" "$CS_TOP_DIR/rt/riak_ee/current" \
    && \
    rt_setup_devrel "$CS_TOP_DIR/stanchion" "$CS_TOP_DIR/rt/stanchion/current" \
    && \
    rt_setup_devrel "$CS_TOP_DIR/riak_cs" "$CS_TOP_DIR/rt/riak_cs/current"
}
rt_setup_prev()
{
    . "$otp_15_base/activate"

    rt_setup_devrel "$CS_TOP_DIR/riak-1.4" "$CS_TOP_DIR/rt/riak/1.4" \
    && \
    rt_setup_devrel "$CS_TOP_DIR/riak_ee-1.4" "$CS_TOP_DIR/rt/riak_ee/1.4" \
    && \
    rt_setup_devrel "$CS_TOP_DIR/stanchion-1.5" "$CS_TOP_DIR/rt/stanchion/1.5" \
    && \
    rt_setup_devrel "$CS_TOP_DIR/riak_cs-1.5" "$CS_TOP_DIR/rt/riak_cs/1.5"

    local ret=$?
    . "$otp_16_base/activate"
    return $ret
}
env_reset_unsetf+=' rt_setup_devrel rt_setup rt_setup_prev'

alias rt_setup_cs=". $otp_16_base/activate && rt_setup_devrel $CS_TOP_DIR/riak_cs $CS_TOP_DIR/rt/riak_cs/current"
alias rt_setup_ee=". $otp_16_base/activate && rt_setup_devrel $CS_TOP_DIR/riak_ee $CS_TOP_DIR/rt/riak_ee/current"
alias rt_setup_os=". $otp_16_base/activate && rt_setup_devrel $CS_TOP_DIR/riak $CS_TOP_DIR/rt/riak/current"
alias rt_setup_st=". $otp_16_base/activate && rt_setup_devrel $CS_TOP_DIR/stanchion $CS_TOP_DIR/rt/stanchion/current"
env_reset_unalias+=' rt_setup_cs rt_setup_ee rt_setup_os rt_setup_st'

rt_vers()
{
    local cwd="$(pwd)"
    local ver
    cd "$CS_TOP_DIR"
    for ver in rt/*[sen]/current/VERSION
    do
        printf '%s:\t%s\n' "${ver%/*}" "$(< "$ver")"
    done
    cd "$cwd"
}
env_reset_unsetf+=' rt_vers'

if $CS_RUNNABLE
then
    start()
    {
        local n r
        for n in riak stanchion riak-cs
        do
            $n start
            r=$?
            [[ $r -eq 0 ]] || return $r
            echo $n started.
        done
    }
    stop()
    {
        local n c r=0
        for n in riak-cs stanchion riak
        do
            $n stop
            c=$?
            if [[ $c -ne 0 ]]
            then
                [[ $r -ne 0 ]] || r=$c
                echo $n error: $c
            else
                echo $n stopped.
            fi
        done
        return $r
    }
    env_reset_unsetf+=' start stop'
fi

rt()
{
    local cur="$(pwd)"

    . "$otp_16_base/activate"

    cd "$CS_TOP_DIR/riak_test" \
    && "$CS_TOP_DIR/riak_test/riak_test" -F "$CS_TOP_DIR/rt.config" "$@"
    local ret=$?
    cd "$cur"
    return $ret
}
rtb()
{
    local cur="$(pwd)"

    . "$otp_16_base/activate"

    cd "$CS_TOP_DIR/riak_cs" \
    && $MAKE compile-riak-test compile-client-test \
    && \
    cd "$CS_TOP_DIR/riak_test" \
    && "$CS_TOP_DIR/riak_test/riak_test" -F "$CS_TOP_DIR/rt.config" "$@"
    local ret=$?
    cd "$cur"
    return $ret
}
env_reset_unsetf+=' rt rtb'

alias cs="cd $CS_TOP_DIR/riak_cs"
alias ee="cd $CS_TOP_DIR/riak_ee"
alias os="cd $CS_TOP_DIR/riak"
alias st="cd $CS_TOP_DIR/stanchion"
alias ct="cd $CS_TOP_DIR"
env_reset_unalias+=' cs ee os st ct'

alias lsc="$ESED -n 's/^\{([[:alnum:]_]+)[[:space:]]*,.*$/  -c \1/p' $CS_TOP_DIR/rt.config"
alias lst="ls -1 $CS_TOP_DIR/riak_cs/riak_test/tests/*.erl | $ESED 's/^.*\/([^/]+)\.erl$/  -t \1/'"
env_reset_unalias+=' lsc lst'

alias rtl="e $CS_TOP_DIR/riak_test/log/test.log"
alias xrt="rm -rf $CS_TOP_DIR/riak_test/log*/* && rt"
alias xrtb="rm -rf $CS_TOP_DIR/riak_test/log*/* && rtb"
alias xrta="rm -rf $CS_TOP_DIR/riak_test/log*/* && rtb -d $CS_TOP_DIR/riak_cs/riak_test/ebin"
env_reset_unalias+=' rtl xrt xrtb xrta'

if [[ -f '/usr/local/bin/s3cmd' ]]
then
    alias s3="/usr/local/bin/s3cmd -c $CS_TOP_DIR/s3cmd.cfg"
    env_reset_unalias+=' s3'
fi

alias r15=". $otp_15_base/activate"
alias r16=". $otp_16_base/activate"
env_reset_unalias+=' r15 r16'

env_ss_format='    %-15s %s\n'
env_reset_unset+=' env_ss_format'

s()
{
    ss

    printf "$env_ss_format" 'rt_setup_devrel' '<source> <rt-dest>  build/install the source package to rt'
    printf "$env_ss_format" 'update_ee_dev' '<ee-node> <cs-root>  set up ee node to use cs'
    printf "$env_ss_format" 'update_ee_rel' 'update the current riak_ee/rel to use current cs'
    echo ''
    printf "$env_ss_format" 's' 'display this list'
    if alias s3 1>/dev/null 2>&1
    then
        printf "$env_ss_format" 's3' 's3cmd'
    fi
    echo ''
    printf "$env_ss_format" 'rt_setup_prev' 'build/install previous cs/ee/stanchion in rt'
    printf "$env_ss_format" 'rt_setup' 'build/install current cs/ee/stanchion in rt'
    printf "$env_ss_format" 'rt_setup_cs' 'build/install current Riak CS in rt'
    printf "$env_ss_format" 'rt_setup_ee' 'build/install current Riak EE in rt'
    printf "$env_ss_format" 'rt_setup_os' 'build/install current Riak OSS in rt'
    printf "$env_ss_format" 'rt_setup_st' 'build/install current Stanchion in rt'
    printf "$env_ss_format" 'rt_vers' 'display current versions in rt'
    echo ''
    if $CS_RUNNABLE
    then
        printf "$env_ss_format" 'start' 'start ee, stanchion, and cs'
        printf "$env_ss_format" 'stop' 'stop cs, stanchion, and ee'
        echo ''
    fi
    printf "$env_ss_format" 'cs' 'cd .../riak_cs'
    printf "$env_ss_format" 'ee' 'cd .../riak_ee'
    printf "$env_ss_format" 'os' 'cd .../riak'
    printf "$env_ss_format" 'st' 'cd .../stanchion'
    printf "$env_ss_format" 'ct' 'cd $CS_TOP_DIR'
    printf "$env_ss_format" 'foreach' '<commands>  run commands in each current source tree'
    printf "$env_ss_format" 'lsc' 'list cs test configs'
    printf "$env_ss_format" 'lst' 'list cs tests'
    printf "$env_ss_format" 'rt' 'riak_test'
    printf "$env_ss_format" 'rtb' 'build tests and run riak_test'
    printf "$env_ss_format" 'rtl' 'open riak_test test.log'
    printf "$env_ss_format" 'xrt' 'delete test logs and run riak_test'
    printf "$env_ss_format" 'xrtb' 'delete test logs, build tests, and run riak_test'
    printf "$env_ss_format" 'xrta' 'delete test logs, build and run all tests'
    echo ''
}
env_reset_unsetf+=' s'

reset_lenv()
{
    [[ "$(typeof kerl_deactivate)" == 'undefined' ]] || kerl_deactivate

    if [[ -n "$env_reset_path" ]]
    then
        PATH="$env_reset_path"
        unset env_reset_path
        export PATH
        hash -r
    fi
    if [[ -n "$env_reset_unalias" ]]
    then
        unalias $env_reset_unalias 2>/dev/null
        unset env_reset_unalias
        alias r15='. /opt/basho/otp-15/activate'
        alias r16='. /opt/basho/otp-16/activate'
    fi
    if [[ -n "$env_reset_unsetf" ]]
    then
        unset -f $env_reset_unsetf 2>/dev/null
        unset env_reset_unsetf
    fi
    if [[ -n "$env_reset_unset" ]]
    then
        unset $env_reset_unset 2>/dev/null
        unset env_reset_unset
    fi
    env_ss_format="$env_ss_format_default"
    unset -f reset_lenv
}
