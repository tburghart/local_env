#
# Common build tools environment
#

unset   CPPFLAGS DEVNODES ERL_LIBS MAKEFLAGS

if [[ -z "$LANG" ]]
then
    LANG='C'
    export LANG
    env_reset_unset+=' LANG'
fi

CFLAGS='-m64 -march=native -mcx16'

case "$(uname -s | tr '[A-Z]' '[a-z]')" in
    darwin )
        CFLAGS+=' -arch x86_64'
        # ugly hack
        if [[ -z "$EXCLUDE_OSX_RT_VERS_FLAG" \
        || "$EXCLUDE_OSX_RT_VERS_FLAG" == 'false' ]]
        then
            CFLAGS+=" -mmacosx-version-min=$(\
                /usr/bin/sw_vers -productVersion | /usr/bin/cut -d. -f1,2)"
        fi
        ccands='/usr/bin/cc gcc cc'
        cccands='/usr/bin/c++ g++ c++'
        ;;
    linux )
        ccands='gcc cc'
        cccands='g++ gcc c++'
        ;;
    *bsd )
        ccands='clang39 clang38 clang37 /usr/bin/cc gcc cc'
        cccands='/usr/bin/c++ g++ c++'
        ;;
    * )
        ccands='cc gcc'
        cccands='c++ g++ gcc'
        ;;
esac

CFLAGS+=' -g -O3'
CXXFLAGS="$CFLAGS"
LDFLAGS="$CFLAGS"

for c in icc $ccands $CC
do
    CC="$(whence $c || true)"
    [[ -z "$CC" ]] || break
done
if [[ -z "$CC" ]]
then
    echo    'error: no C compiler found!' >&2
    unset   c ccand cccand
    return  2
fi
if [[ "${CC##*/}" == icc || "${CC##*/}" == clang* ]]
then
    CXX="$CC"
else
    for c in $cccands $CC
    do
        CXX="$(whence $c || true)"
        [[ -z "$CXX" ]] || break
    done
fi
unset   c ccand cccand

CCC="$CXX"
CCFLAGS="$CXXFLAGS"

export  CC CFLAGS CCC CCFLAGS CXX CXXFLAGS LDFLAGS
env_reset_unset+=' CC CFLAGS CCC CCFLAGS CXX CXXFLAGS LDFLAGS'
