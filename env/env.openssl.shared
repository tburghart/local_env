#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 2014-2018 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# Build/install environment for OpenSSL from GitHub
#
#   Clone from: https://github.com/openssl/openssl.git
#

if [[ -z "$OPENSSL_SOURCE" ]]
then
    OPENSSL_SOURCE="$lenv_current"
    [[ " $env_reset_unset " == *\ OPENSSL_SOURCE\ * ]] || env_reset_unset+=' OPENSSL_SOURCE'
fi
export  OPENSSL_SOURCE

[[ ! -f "$lenv_current/env.local" ]] || . "$lenv_current/env.local" || return $?

. "$LOCAL_ENV_DIR/ssl.install.data"

openssl_clean="$GIT clean -fdqx"
if [[ "$($GIT --version | $ESED \
    's/^[[:alpha:] ]*[[:space:]]([[:digit:]]+)[^[:digit:]].*$/\1/')" -gt 1 ]]
then
    openssl_clean+=' -e /env -e /env.local'
    openssl_clean+=' -e .tm_properties -e /.idea/ -e \*.iml -e \*.txt'
fi
[[ " $env_reset_unset " == *\ openssl_clean\ * ]] || env_reset_unset+=' openssl_clean'

alias vclean="cd $OPENSSL_SOURCE && $openssl_clean"
[[ " $env_reset_unalias " == *\ vclean\ * ]] || env_reset_unalias+=' vclean'

unset   AR ARFLAGS CC CFLAGS LDFLAGS MAKEFLAGS RANLIB
export  LANG='C'
export  KERNEL_BITS='64'

#
# _update_vsn <branch>
#
# Build, test, and install the latest tagged release on <branch>
#
_update_vsn()
{
    local label
    case "$1" in
        openssl-*)
            label="$1"
            ;;
        *)
            label="openssl-$1"
            ;;
    esac
    local rec branch=''
    for rec in $openssl_branches
    do
        if [[ "${rec%%=*}" == "$label" ]]
        then
            branch="${rec##*=}"
            break
        fi
    done
    if [[ -z "$branch" ]]
    then
        echo "error: unmapped version '$1'" >&2
        return 1
    fi
    cd "$OPENSSL_SOURCE"

    if [[ -f 'Makefile' ]]
    then
        echo "==> $MAKE clean"
        $MAKE clean || return $?
    fi

    echo "==> $openssl_clean"
    $openssl_clean || return $?

    echo "==> $GIT checkout --quiet --force $branch"
    $GIT checkout --quiet --force "$branch" || return $?

    echo "==> $GIT pull --quiet"
    $GIT pull --quiet || return $?

    local tag="$($GIT describe)"
    [[ -n "$tag" ]] || return 1
    if [[ "$tag" == *-* ]]
    then
        tag="${tag%%-*}"
        echo "==> $GIT checkout --quiet $tag"
        $GIT checkout --quiet "$tag" || return $?
    fi

    echo "==> $GIT reset --hard --quiet $tag"
    $GIT reset --hard --quiet "$tag" || return $?

    # shouldn't do anything, just making sure
    $openssl_clean || return $?

    local dst="$ssl_install_base/$tag"
    local cmd='./config'
    cmd+=" --prefix=$dst"
    cmd+=" --openssldir=$dst/ssl"
    cmd+=' enable-ec_nistp_64_gcc_128 shared'

    echo "==> $cmd"
    $cmd || return $?

    echo "==> $MAKE depend"
    $MAKE depend || return $?

    echo "==> $MAKE"
    $MAKE || return $?

    echo "==> $MAKE test"
    $MAKE test || return $?

    local old="$dst.prev"
    if [[ -d "$dst" ]]
    then
        [[ ! -d "$old" ]] || /bin/rm -rf "$old" || return $?
        echo "==> /bin/mv '$dst' '$old'"
        /bin/mv "$dst" "$old" || return $?
    fi
    echo "==> $MAKE install"
    $MAKE install || return $?

    echo "==> /bin/ln -fs '$tag' '$ssl_install_base/$label'"
    /bin/ln -fns "$tag" "$ssl_install_base/$label" || return $?
    # [[ ! -d "$old" ]] || /bin/rm -rf "$old" || return $?
}
[[ " $env_reset_unsetf " == *\ _update_vsn\ * ]] || env_reset_unsetf+=' _update_vsn'

update_inst()
{
    local -a vsns
    local vsn
    if [[ $# -eq 0 ]]
    then
        for vsn in $openssl_branches
        do
            vsns+=("${vsn%%=*}")
        done
    else
        vsns=("$@")
    fi
    for vsn in "${vsns[@]}"
    do
        _update_vsn "$vsn"
        tmp=$?
        [[ $tmp -eq 0 ]] || return $tmp
    done
}
[[ " $env_reset_unsetf " == *\ update_inst\ * ]] || env_reset_unsetf+=' update_inst'

s()
{
    ss

    printf "$env_ss_format" 'update_inst' '[version ...]  build/install all (or specified) versions'
    printf "$env_ss_format" 'vclean' 'deep clean build'
    echo ''
}
[[ " $env_reset_unsetf " == *\ s\ * ]] || env_reset_unsetf+=' s'
