#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 2014-2017 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# Build/install environment for OpenSSL from GitHub
#
#   Clone from: https://github.com/openssl/openssl.git
#

if [[ -z "$OPENSSL_SOURCE" ]]
then
    OPENSSL_SOURCE="$lenv_current"
    [[ " $env_reset_unset " == *\ OPENSSL_SOURCE\ * ]] || env_reset_unset+=' OPENSSL_SOURCE'
fi
export  OPENSSL_SOURCE

[[ ! -f "$lenv_current/env.local" ]] || . "$lenv_current/env.local" || return $?

if [[ -z "$openssl_branches" ]]
then
    openssl_branches='openssl-1.0=OpenSSL_1_0_2-stable openssl-1.1=OpenSSL_1_1_0-stable'
    [[ " $env_reset_unset " == *\ openssl_branches\ * ]] || env_reset_unset+=' openssl_branches'
fi
if [[ -z "$openssl_inst_root" ]]
then
    openssl_inst_root='/opt/local'
    [[ " $env_reset_unset " == *\ openssl_inst_root\ * ]] || env_reset_unset+=' openssl_inst_root'
fi

openssl_clean="$GIT clean -fdqx"
if [[ "$($GIT --version | $ESED \
    's/^[[:alpha:] ]*[[:space:]]([[:digit:]]+)[^[:digit:]].*$/\1/')" -gt 1 ]]
then
    openssl_clean+=' -e /env -e /env.local'
    openssl_clean+=' -e .tm_properties -e /.idea/ -e \*.iml -e \*.txt'
fi
[[ " $env_reset_unset " == *\ openssl_clean\ * ]] || env_reset_unset+=' openssl_clean'

alias vclean="cd $OPENSSL_SOURCE && $openssl_clean"
[[ " $env_reset_unalias " == *\ vclean\ * ]] || env_reset_unalias+=' vclean'

unset   AR ARFLAGS CC CFLAGS LDFLAGS MAKEFLAGS RANLIB
export  LANG='C'
export  KERNEL_BITS='64'

_update_vsn()
{
    local label vsn
    case "$1" in
        openssl-*)
            label="$1"
            ;;
        *)
            label="openssl-$1"
            ;;
    esac
    local branch='' tmp
    for tmp in $openssl_branches
    do
        if [[ "${tmp%%=*}" == "$label" ]]
        then
            branch="${tmp##*=}"
            break
        fi
    done
    if [[ -z "$branch" ]]
    then
        echo "error: unmapped version '$1'" >&2
        return 1
    fi
    cd "$OPENSSL_SOURCE"

    echo "===> $openssl_clean"
    $openssl_clean
    tmp=$?
    [[ $tmp -eq 0 ]] || return $tmp

    echo "===> $GIT checkout --force $branch"
    $GIT checkout --force "$branch"
    tmp=$?
    [[ $tmp -eq 0 ]] || return $tmp

    echo "===> $GIT pull"
    $GIT pull
    tmp=$?
    [[ $tmp -eq 0 ]] || return $tmp

    echo "===> $GIT reset --hard $branch"
    $GIT reset --hard "$branch"
    tmp=$?
    [[ $tmp -eq 0 ]] || return $tmp

    # shouldn't do anything, just making sure
    $openssl_clean
    tmp=$?
    [[ $tmp -eq 0 ]] || return $tmp

    local cmd='./config'
    cmd+=" --prefix=$openssl_inst_root/$label"
    cmd+=" --openssldir=$openssl_inst_root/$label/ssl"
    cmd+=' enable-ec_nistp_64_gcc_128 shared zlib'

    echo "===> $cmd"
    $cmd
    tmp=$?
    [[ $tmp -eq 0 ]] || return $tmp

    echo "===> $MAKE depend"
    $MAKE depend
    tmp=$?
    [[ $tmp -eq 0 ]] || return $tmp

    echo "===> $MAKE"
    $MAKE
    tmp=$?
    [[ $tmp -eq 0 ]] || return $tmp

    echo "===> $MAKE test"
    $MAKE test
    tmp=$?
    [[ $tmp -eq 0 ]] || return $tmp

    echo "===> $MAKE install"
    $MAKE install
}
[[ " $env_reset_unsetf " == *\ _update_vsn\ * ]] || env_reset_unsetf+=' _update_vsn'

update_inst()
{
    if [[ $# -eq 0 ]]
    then
        local vsns='' vsn
        for vsn in $openssl_branches
        do
            vsns+=" ${vsn%%=*}"
        done
        update_inst $vsns
        return $?
    fi
    local vsn tmp
    for vsn in "$@"
    do
        _update_vsn "$vsn"
        tmp=$?
        [[ $tmp -eq 0 ]] || return $tmp
    done
}
[[ " $env_reset_unsetf " == *\ update_inst\ * ]] || env_reset_unsetf+=' update_inst'

s()
{
    ss

    printf "$env_ss_format" 'update_inst' '[version ...]  build/install all (or specified) versions'
    printf "$env_ss_format" 'vclean' 'deep clean build'
    echo ''
}
[[ " $env_reset_unsetf " == *\ s\ * ]] || env_reset_unsetf+=' s'
