#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 2014-2018 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# Shared OTP environment setup
#
# Refer to files in https://github.com/tburghart/local_env
#
# To be sourced in a Bash environment by 'lenv'
#
# Assume this is being sourced by bash, so BASH_SOURCE[0] is this file,
# BASH_SOURCE[1] is the file that sourced this one, etc...
#
# If present, the 'env.local' file is sourced immediately. Any named elements
# set there that are not explicitly reset by 'lenv' should be added to the
# appropriate $env_reset_xxx or $env_local_unset list.
#
# A few environment variables are recognized and/or required:
#
#   ERL_TOP SHOULD be set to the top of an Erlang/OTP source tree. If not
#   present, it is set to the current working directory.
#
#   otp_name MAY be set to the name of the directory under otp.install.base
#   where the release will be installed.
#   If not set it is calculated by otp.local.name
#   Whether preset or not, it is unset after this file is sourced!
#
#   otp_config_opts MAY be set to the options to be passed to ./configure
#   and its ilk.
#   If not set, an appropriate one is used.
#   Whether preset or not, it is unset after this file is sourced!
#
#   The following environment variables are unset if present:
#       MAKEFLAGS
#   
#   The following environment variables are set to basic values if not set:
#       CC CXX CFLAGS CXXFLAGS LANG LDFLAGS
#   
#   The following environment variables are unset during reset_lenv()
#   cleanup IFF they were set by this file:
#       ERL_TOP CC CXX CFLAGS CXXFLAGS LANG LDFLAGS
#
#   env_reset_unalias, env_reset_unset, env_reset_unsetf, if set, will be
#   parameters to 'unalias', 'unset', and 'unset -f', respectively during
#   reset_lenv() cleanup.
#

kerl_deactivate 2>/dev/null || true

if [[ -z "$ERL_TOP" ]]
then
    ERL_TOP="$lenv_current"
    [[ " $env_reset_unset " == *\ ERL_TOP\ * ]] || env_reset_unset+=' ERL_TOP'
fi
unset   MAKEFLAGS EXCLUDE_OSX_RT_VERS_FLAG
export  ERL_TOP

[[ ! -f "$lenv_current/env.local" ]] || . "$lenv_current/env.local" || return $?

# pull these in early so they'll generate errors early if they're going to
for n in \
    os.type \
    otp.install.base \
    otp.local.name \
    otp.source.version \
    env.tool.defaults \
    otp.config.opts
do
    . "$LOCAL_ENV_DIR/$n"
done

if [[ "$PATH" != "$ERL_TOP/bin":* ]]
then
    export  PATH="$ERL_TOP/bin:$PATH"
    hash    -r
fi

kerl_deactivate()
{
    if [[ -n "$ERL_TOP" && "$PATH" == "$ERL_TOP/bin":* ]]
    then
        export  PATH="${PATH#${ERL_TOP}/bin:}"
        hash    -r
    fi
    unset   -f kerl_deactivate
}

otp_label="$otp_name"
[[ " $env_local_unset " == *\ otp_label\ * ]] || env_local_unset+=' otp_label'
case " $otp_config_opts " in
    *\ --enable-hipe\ *)
        otp_label+='h'
        ;;
    *\ --disable-hipe\ *)
        ;;
    *)
        if $otp_hipe_default
        then
            otp_config_opts+=' --enable-hipe'
            otp_label+='h'
        else
            otp_config_opts+=' --disable-hipe'
        fi
        ;;
esac
OTP_LOCAL_NAME="$otp_label"
OTP_LOCAL_INST="$otp_install_base/$otp_label"
env_reset_unset+=' OTP_LOCAL_INST OTP_LOCAL_NAME'
export  OTP_LOCAL_INST OTP_LOCAL_NAME

case " $otp_config_opts " in
    *\ --with-odbc[\ =]*)
        ;;
    *\ --without-odbc\ *)
        ;;
    *)
        otp_config_opts+=' --without-odbc'
        ;;
esac
otp_config_opts="--prefix $otp_install_base/$otp_label $otp_config_opts"

build_log="$ERL_TOP/build.$os_type.$otp_label.txt"
env_reset_unset+=' build_log'

newer()
{
    echo 'Not implemented!'
}
env_reset_unsetf+=' newer'

run_build()
{
    local mf='-j5'
    cd "$ERL_TOP"
    /bin/date >"$build_log"
    echo "MAKEFLAGS=$mf" "$@" >>"$build_log"
    /usr/bin/tail -f "$build_log" &
    local tp=$!
    LANG=C MAKEFLAGS="$mf" "$@" >>"$build_log"
    local n=$?
    /bin/date >>"$build_log"
    kill "$tp"
    unset tp mf
    hash -r
    return $n
}
env_reset_unsetf+=' run_build'

if [[ "$otp_src_vsn_major" -ge 16 ]]
then
    smoke()
    {
        cd "$ERL_TOP"
        $MAKE tests
        cd 'release/tests/test_server'
        TZ='MET' "$ERL_TOP/bin/erl" -s ts install -s ts smoke_test batch -s init stop
        cd "$ERL_TOP"
        if [[ -z "$SSH_CLIENT" && -z "$SSH_TTY" && "$(uname -s)" == [Dd]arwin ]]
        then
            open 'release/tests/test_server/index.html'
        else
            echo open "'$ERL_TOP/release/tests/test_server/index.html'"
        fi
    }
else
    smoke()
    {
        cd "$ERL_TOP"
        $MAKE tests
        cd 'release/tests/test_server'
        scr='ts:install(), ts:run(['
        scr+='emulator, kernel, stdlib, erl_interface, os_mon, ic, system'
        scr+='], [batch]), halt().'
        TZ='MET' "$ERL_TOP/bin/erl" -noshell -eval "$scr"
        unset scr
        cd "$ERL_TOP"
        if [[ -z "$SSH_CLIENT" && -z "$SSH_TTY" && "$(uname -s)" == [Dd]arwin ]]
        then
            open 'release/tests/test_server/index.html'
        else
            echo open "'$ERL_TOP/release/tests/test_server/index.html'"
        fi
    }
fi
env_reset_unsetf+=' smoke'

install_local_otp()
{
    cd "$ERL_TOP"
    $MAKE install
    if [[ -d "$OTP_LOCAL_INST" && ! -f "$OTP_LOCAL_INST/activate" ]]
    then
        /bin/ln -s "$LOCAL_ENV_DIR/otp.activate" "$OTP_LOCAL_INST/activate"
    fi
}
env_reset_unsetf+=' install_local_otp'

alias blog="m '$build_log'"
alias clean="cd '$ERL_TOP' && $MAKE clean && hash -r"
alias config="cd '$ERL_TOP' && ./otp_build configure $otp_config_opts"
alias inst="cd '$ERL_TOP' && otp.replace.as . $otp_label"
alias inst='install_local_otp'
alias mkconf="cd '$ERL_TOP' && ./otp_build autoconf"
alias mkdocs="cd '$ERL_TOP' && $MAKE docs install-docs"
alias mkerl="run_build $MAKE"
alias mktest="cd '$ERL_TOP' && $MAKE tests && cd 'release/tests/test_server' && '$ERL_TOP/bin/erl' -s ts install -s init stop && cd '$ERL_TOP'"
alias setup="run_build ./otp_build setup -a $otp_config_opts"
alias vclean="cd '$ERL_TOP' && $GIT clean -fdqx -e /env -e /env.local -e /.idea/ -e '*.iml' -e '/*.txt' && hash -r"
alias bdebug="cd '$ERL_TOP/erts/emulator' && $MAKE debug FLAVOR=plain && $MAKE debug FLAVOR=smp"
alias erld="$ERL_TOP/bin/cerl -debug"
env_reset_unalias+=' bdebug blog clean config erld inst mkconf mkdocs mkerl mktest setup vclean'

alias sslopts="cd '$ERL_TOP' && /usr/bin/egrep -Rlw '(sslv3|secure_renegotiate|honor_cipher_order|padding_check)' lib/ssl/doc/src lib/ssl/src lib/ssl/test"
env_reset_unalias+=' sslopts'

s()
{
    ss

    printf "$env_ss_format" 'setup' 'otp_build setup -a ... >build-log'
    printf "$env_ss_format" 'bdebug' 'build a debug OTP kernel'
    printf "$env_ss_format" 'erld' 'run ERL with the debug kernel'
    printf "$env_ss_format" 'smoke' 'make & run smoke tests'
    printf "$env_ss_format" 'inst' 'install/replace local installation'
    printf "$env_ss_format" 'vclean' 'deep clean build'
    echo ''
    printf "$env_ss_format" 'blog' 'open build-log'
    printf "$env_ss_format" 'clean' 'cleanup build'
    printf "$env_ss_format" 'config' 'otp_build configure ...'
    printf "$env_ss_format" 'mkconf' 'otp_build autoconf'
    printf "$env_ss_format" 'mkdocs' 'make & install docs'
    printf "$env_ss_format" 'mkerl' 'make >build-log'
    printf "$env_ss_format" 'mktest' 'make tests'
    printf "$env_ss_format" 'newer' 'report whether source tree is newer than istallation'
    echo ''
    printf "$env_ss_format" 'sslopts' 'list files containing target ssl options'
    echo ''
}
env_reset_unsetf+=' s'
