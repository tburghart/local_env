#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 2016 T. R. Burghart.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# Environment setup for working on rebar3 provider modules.
#
# Refer to files in https://github.com/tburghart/local_env
#
# To be sourced in a Bash environment by 'lenv'
#

prov_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
rebar_dir="$TRB_PRJ_BASE/rebar3"
env_reset_unset+=' prov_dir rebar_dir'

. "$LOCAL_ENV_DIR/otp.install.base" || return $?
. "$otp_install_base/otp-19/activate" || return $?

_run_r3()
{
    local lib="$1"
    shift
    if [[ ! -f "$lib/rebar/ebin/rebar3.beam" ]]
    then
        echo "rebar3 not built in $lib" >&2
        return 2
    fi
    local libs="$(/bin/ls -md $lib/*/ebin \
        | tr -d '[:space:]' | tr , '\040')"
    #
    # rebar's main/1 function calls erlang:halt/1 in all cases *except*
    # when its handle_error/1 function doesn't match whatever percolated
    # up from underneath, so we catch and report in that case only.
    #
    local scr='try rebar3:main(['
    local arg delim=''
    for arg in "$@"
    do
        scr+="${delim}\"${arg}\""
        delim=','
    done
    scr+=']) catch Class:Error ->'
    if [[ -n "$DEBUG" ]]
    then
        scr+=' io:format("exception ~p:~p~n~p~n",'
        scr+=' [Class, Error, erlang:get_stacktrace()]),'
    else
        scr+=' io:format("exception ~p:~p~n", [Class, Error]),'
    fi
    scr+=' erlang:halt(1) end.'
    $(type -p erl) -noshell -eval "$scr" -pa $libs
}
env_reset_unsetf+=' _run_r3'

alias r3="_run_r3 $rebar_dir/_build/default/lib"
alias r3d="_run_r3 $rebar_dir/_build/dialyze/lib"
env_reset_unalias+=' r3 r3d'

dialyze()
{
    local lib="$rebar_dir/_build/dialyze/lib"
    if [[ ! -f "$lib/rebar/ebin/rebar3.beam" ]]
    then
        echo "rebar3 not built in $lib" >&2
        return 2
    fi
    local plt="$prov_dir/$LOCAL_PLT"
    local exe="$(type -p dialyzer)"
    local libs="$(/bin/ls -md $lib/*/ebin \
        | tr -d '[:space:]' | tr , '\040')"

    echo '  Checking PLTs...'
    [[ ! -f "$plt" ]] \
    || "$exe" --quiet --check_plt --plt "$plt" $libs \
    || rm -f "$plt"

    [[ -f "$plt" ]] \
    || "$exe" --quiet --build_plt --output_plt "$plt" $libs \
    || return $?

    "$exe" -Wunmatched_returns --no_check_plt --plts "$PLT" "$plt" -- "$@"
}
env_reset_unsetf+=' dialyze'
