#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 2016 T. R. Burghart.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# Environment setup for working on rebar3 provider modules.
#
# Refer to files in https://github.com/tburghart/local_env
#
# To be sourced in a Bash environment by 'lenv'
#

prov_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
rebar_profile='check'
env_reset_unset+=' prov_dir rebar_profile'

. "$LOCAL_ENV_DIR/otp.install.base" || return $?
. "$otp_install_base/otp-19/activate" || return $?

app_list_script="RcName = case os:getenv(\"REBAR_CONFIG\") of
    [_|_] = Env ->
        Env;
    _ ->
        \"rebar.config\"
end,
RcFile = filename:join(\"$prov_dir\", RcName),
RcTerms = case file:consult(RcFile) of
    {ok, Terms} ->
        Terms;
    {error, What} ->
        io:format(standard_error,
            \"~s: ~s~p\", [RcFile, file:format_error(What)]),
        erlang:halt(1)
end,
Sect = proplists:get_value(profiles, RcTerms, []),
Prof = proplists:get_value($rebar_profile, Sect, []),
Opts = proplists:get_value(dialyzer, Prof, []),
Apps = proplists:get_value(plt_extra_apps, Opts, []),
Strs = [erlang:atom_to_list(App) || App <- Apps],
io:put_chars([string:join(Strs, \" \"), \$\n]),
erlang:halt(0)."
env_reset_unset+=' app_list_script'

otp_vsn_script="Rel = case erlang:system_info(otp_release) of
    [\$R | S] ->
        S;
    S ->
        S
end,
{Vsn, _} = string:to_integer(Rel),
io:format(\"~b\", [Vsn]),
erlang:halt(0)."
env_reset_unset+=' otp_vsn_script'

show_run()
{
    echo '>>' "$@"
    "$@"
}
env_reset_unsetf+=' show_run'

dialyze()
{
    local vsn="$(erl -noshell -eval "$otp_vsn_script")"
    local app="${1:-${prov_dir##*/}}"

    rebar3 as $rebar_profile compile || return $?        

    local apps="$($(type -p erl) -noshell -eval "$app_list_script")"
    if [[ -z "$apps" ]]
    then
        apps='getopt providers rebar'
        echo 'Warning: No apps configured, using defaults.' >&2
    fi
    echo "  Using apps: $apps"

    local lib="$prov_dir/_build/$rebar_profile/lib"
    local tgt="$lib/$app/ebin"
    local plt="$prov_dir/$LOCAL_PLT"
    local exe="$(type -p dialyzer)"
    # plt_extra_apps *may* include stuff from OTP that won't be local
    local dir libs=''
    for dir in $apps
    do
        if [[ -d "$lib/$dir/ebin" ]]
        then
            libs+=" $lib/$dir/ebin"
        fi
    done
    local warn='-Werror_handling -Wrace_conditions -Wunmatched_returns'
    [[ $vsn -lt 18 ]] || warn+=' -Wunknown'
    # if [[ $vsn -lt 18 ]]
    # then
    #     warn+=' -Wno_opaque'
    # else
    #     warn+=' -Wunknown'
    # fi
    echo '  Checking PLTs...'
    [[ ! -f "$plt" ]] \
    || "$exe" --quiet --check_plt --plt "$plt" $libs \
    || rm -f "$plt"

    [[ -f "$plt" ]] \
    || "$exe" --quiet --build_plt --output_plt "$plt" $libs \
    || return $?

    "$exe" $warn --no_check_plt --plts "$PLT" "$plt" -- "$tgt"
}
env_reset_unsetf+=' dialyze'

testall()
{
    local vsn="$(erl -noshell -eval "$otp_vsn_script")"
    # local chkprof='check'
    # if [[ $vsn -lt 18 ]]
    # then
    #     chkprof+=',check_old'
    # fi
    echo Using Erlang/OTP $vsn
    cd "$prov_dir" \
    && /bin/rm -rf _build doc ebin rebar.lock *.dump *.crashdump

    show_run rebar3 as validate compile \
    && show_run rebar3 compile \
    && show_run rebar3 as prod compile \
    && show_run rebar3 as check xref \
    && show_run rebar3 as check dialyzer \
    && show_run rebar3 eunit \
    && show_run rebar3 edoc
}
env_reset_unsetf+=' testall'

alias testalla='for n in 16 17 18 19 ; do . /opt/basho/otp-$n/activate || break ; testall || break ; done'
env_reset_unalias+=' testalla'
