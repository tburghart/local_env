#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 2014-2016 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# Shared Riak environment setup
#
# Refer to files in https://github.com/tburghart/local_env
#
# To be sourced in a Bash environment by 'lenv'
#
# Assume this is being sourced by bash, so BASH_SOURCE[0] is this file,
# BASH_SOURCE[1] is the file that sourced this one, etc...
#
# If present, the 'env.local' file is sourced immediately. Any named elements
# set there that are not explicitly mentioned as being reset here should be
# added to the appropriate $env_reset_xxx list.
#
# A few environment variables are recognized:
#
#   otp_name
#       A top-level directory under $otp_install_base containing an OTP
#       'activate' script.
#       Supercedes $otp_path.
#       Defaults to $otp_path or as determined by Riak version.
#       Cleared on return from this script.
#
#   otp_path
#       A top-level OTP build directory, functionally equivalent to $ERL_TOP,
#       containing an OTP 'activate' script.
#       Superceded by $otp_name.
#       Defaults to $otp_name or as determined by Riak version.
#       Cleared on return from this script.
#
#   rt_src_name
#       A top-level riak_test source/build directory under $env_ee_path/..
#       Supercedes $rt_src_path.
#       Defaults to $rt_src_path or as determined by Riak version.
#       Cleared on return from this script.
#
#   rt_src_path
#       A top-level riak_test source/build directory.
#       Superceded by $rt_src_name.
#       Defaults to $rt_src_name or as determined by Riak version.
#       Cleared on return from this script.
#
#   env_rt_root
#       The root of the git repo in which instances are installed for use by
#       riak_test.
#       Defaults to "$HOME/rt/riak".
#       Cleared on lenv() reset.
#   
#   env_rt_name
#       Subdirectory of $env_rt_work where builds are installed for testing.
#       Defaults to the basename of the Riak source tree.
#       Cleared on lenv() reset.
#
#   local_...
#       Variables with names matching the pattern 'local_[[:alnum:]_]+' are
#       cleared on return from this script.
#
#   env_local_unset
#       Parameters to 'unset' on return from this script.
#       Cleared on return from this script.
#
#   env_reset_unalias
#   env_reset_unset
#   env_reset_unsetf
#       Parameters to 'unalias', 'unset', and 'unset -f', respectively, during
#       reset_lenv() cleanup.
#       Cleared on lenv() reset.
#

env_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[[ -n "$cur_dir" && -d "$cur_dir" ]] || cur_dir="$env_dir"
env_local_unset+=' env_dir cur_dir'

env_ee_path="$env_dir"
env_reset_unset+=' env_ee_path'

if [[ -f "$env_dir/env.local" ]]
then
    . "$env_dir/env.local"
fi

local_ee_src_name="${env_ee_path##*/}"
local_ee_src_vers="$(cut -d- -f2 <<< "$local_ee_src_name")"
[[ -n "$local_ee_src_vers" ]] || local_ee_src_vers="$(\
    cd "$env_ee_path" && $GIT describe --tags | cut -d- -f2)"
local_ee_src_major="${local_ee_src_vers%%.*}"
local_ee_src_minor="$(cut -d. -f2 <<< "$local_ee_src_vers")"

if [[ -n "$otp_name" ]]
then
    . "$LOCAL_ENV_DIR/otp.install.base"
    env_local_unset+=' otp_install_base'
    otp_activate="$otp_install_base/$otp_name/activate"
    unset otp_name otp_path
elif [[ -n "$otp_path" ]]
then
    if [[ ! -d "$otp_path" ]]
    then
        echo    "error: otp_path '$otp_path' is not a directory" >&2
        unset   otp_path
        return  2
    fi
    otp_activate="$(cd "$otp_path" && pwd)/activate"
    unset otp_path
else
    . "$LOCAL_ENV_DIR/otp.install.base"
    env_local_unset+=' otp_install_base'
    local_ee_src_vers="$(cut -d- -f2 <<< "$local_ee_src_name")"
    if [[ -n "$local_ee_src_vers" ]]
    then
        case "$local_ee_src_major" in
            1)
                otp_activate="$otp_install_base/otp-15-p1/activate"
                ;;
            2)
                case "$local_ee_src_minor" in
                    0|1)
                        otp_activate="$otp_install_base/otp-16/activate"
                        ;;
                    2)
                        otp_activate="$otp_install_base/otp-17/activate"
                        ;;
                    *)
                        otp_activate="$otp_install_base/otp-18/activate"
                        ;;
                esac
                ;;
            *)
                otp_activate="$otp_install_base/otp-18/activate"
                ;;
        esac
    else
        otp_activate="$otp_install_base/otp-18/activate"
    fi
    
fi
env_reset_unset+=' otp_activate'

if [[ ! -f "$otp_activate" ]]
then
    echo    "error: '$otp_activate' not present" >&2
    return  2
fi

if [[ -n "$rt_src_name" ]]
then
    if [[ ! -d "$env_ee_path/../$rt_src_name" ]]
    then
        echo    "error: rt_src_name '$rt_src_name' not found" >&2
        unset   rt_src_name rt_src_path
        return  2
    fi
    env_rt_src_path="$(cd "$env_ee_path/../$rt_src_name" && pwd)"
    unset rt_src_name rt_src_path
elif [[ -n "$rt_src_path" ]]
then
    if [[ ! -d "$rt_src_path" ]]
    then
        echo    "error: rt_src_path '$rt_src_path' is not a directory" >&2
        unset   rt_src_path
        return  2
    fi
    env_rt_src_path="$(cd "$rt_src_path" && pwd)"
    unset rt_src_path
else
    for n in \
        "$env_ee_path/../riak_test-$local_ee_src_major.$local_ee_src_minor" \
        "$env_ee_path/../riak_test-$local_ee_src_major" \
        "$env_ee_path/../riak_test-master" \
        "$env_ee_path/../riak_test"
    do
        if [[ -d "$n" ]]
        then
            env_rt_src_path="$(cd "$n" && pwd)"
            break
        fi
    done
    unset n
    if [[ -z "$env_rt_src_path" ]]
    then
        echo    'error: no suitable riak_test directory found' >&2
        return  2
    fi
fi
env_reset_unset+=' env_rt_src_path'

check_active_otp()
{
    local otp_path="${otp_activate%/*}"
    if [[ -d "$otp_path/bin" && -d "$otp_path/lib" \
    && -f "$otp_path/bin/erlc" && -x "$otp_path/bin/erlc" \
    && -f "$otp_path/bin/erl" && -x "$otp_path/bin/erl" ]]
    then
        return 0
    fi
    echo "error: '$otp_path' doesn't contain necessary ERTS components" >&2
    return 1
}
env_reset_unsetf+=' check_active_otp'

if check_active_otp
then
    . "$otp_activate"
fi

# ugly hack for leveldb
EXCLUDE_OSX_RT_VERS_FLAG='true'
. "$LOCAL_ENV_DIR/env.tool.defaults"
unset EXCLUDE_OSX_RT_VERS_FLAG

[[ -n "$env_rt_root" ]] || env_rt_root="$HOME/rt/riak"
[[ -n "$env_rt_name" ]] || env_rt_name="$local_ee_src_name"
env_reset_unset+=' env_rt_root env_rt_name'

rt_setup()
{
    local cwd="$(pwd)"

    check_active_otp \
    && . "$otp_activate" \
    && printf 'Using OTP: %s %s\n' "$(which erl)" "$(which erlc)" \
    && \
    echo "builing '$env_ee_path'" \
    && cd "$env_ee_path" \
    && $MAKE clean \
    && rm -rf deps dev \
    && $GIT clean -fdqx -e /env -e /env.local -e /.idea/ -e '*.iml' -e '/*.txt' \
    && $MAKE stagedevrel \
    && \
    echo "installing '$env_rt_root/$env_rt_name'" \
    && cd "$env_rt_root" \
    && $GIT reset --hard -q HEAD \
    && $GIT clean -fdq \
    && rm -rf "$env_rt_name/dev" \
    && cp -pPR "$env_ee_path/dev" "$env_rt_name/dev" \
    && printf "$(cd "$env_ee_path" && $GIT describe --tags)" > "$env_rt_name/VERSION" \
    && $GIT add -A "$env_rt_name" \
    && $GIT commit -q -m 'riak_test init' --amend "$env_rt_name"

    local ret=$?
    cd "$cwd"
    return $ret
}
env_reset_unsetf+=' rt_setup'

rt()
{
    local cur="$(pwd)"

    check_active_otp \
    && . "$otp_activate" \
    && cd "$env_rt_src_path" \
    && ./riak_test "$@"

    local ret=$?
    cd "$cur"
    return $ret
}
rtb()
{
    local cur="$(pwd)"

    check_active_otp \
    && . "$otp_activate" \
    && cd "$env_rt_src_path" \
    && $MAKE \
    && ./riak_test "$@"

    local ret=$?
    cd "$cur"
    return $ret
}
env_reset_unsetf+=' rt rtb'

alias lt="ls -1 $env_rt_src_path/tests/*.erl | $ESED 's/^.*\/([^/]+)\.erl$/  -t \1/'"
alias xrt="rm -rf $env_rt_src_path/log*/* && rt"
alias xrtb="rm -rf $env_rt_src_path/log*/* && rtb"
alias xrta="rm -rf $env_rt_src_path/log*/* && rtb -d $env_rt_src_path/ebin"
env_reset_unalias+=' lt xrt xrtb xrta'

alias ee="cd $env_ee_path"
alias vclean="cd $env_ee_path && $GIT clean -f -f -dqx -e /env -e /env.local -e /.idea/ -e '*.iml' -e '/*.txt' && hash -r"
env_reset_unalias+=' ee vclean'

s()
{
    ss

    printf "$env_ss_format" 'rt_setup' 'clean, build, and stage instance to rt'
    echo ''
    printf "$env_ss_format" 'lt' 'list riak_test tests'
    printf "$env_ss_format" 'rt' 'cd to the riak_test directory and run riak_test'
    printf "$env_ss_format" 'rtb' 'build and run riak_test'
    printf "$env_ss_format" 'xrt' 'delete test logs and run riak_test'
    printf "$env_ss_format" 'xrtb' 'delete test logs, build and run riak_test'
    printf "$env_ss_format" 'xrta' 'delete test logs, build and run all tests'
    echo ''
    printf "$env_ss_format" 'ee' 'cd to the ee source directory'
    printf "$env_ss_format" 'vclean' 'clean ee build tree without mercy!'
    echo ''
}
env_reset_unsetf+=' s'
