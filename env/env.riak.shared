#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 2014-2016 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# Shared Riak environment setup
#
# Refer to files in https://github.com/tburghart/local_env
#
# To be sourced in a Bash environment by 'lenv'
#
# Assume this is being sourced by bash, so BASH_SOURCE[0] is this file,
# BASH_SOURCE[1] is the file that sourced this one, etc...
#
# If present, the 'env.local' file is sourced immediately. Any named elements
# set there that are not explicitly mentioned as being reset here should be
# added to the appropriate $env_reset_xxx list.
#
# A few environment variables are recognized:
#
#   otp_name
#       A top-level directory under $otp_install_base containing an OTP
#       'activate' script.
#       Supercedes $otp_path.
#       Defaults to $otp_path or as determined by Riak version.
#       Cleared on return from this script.
#
#   otp_path
#       A top-level OTP build directory, functionally equivalent to $ERL_TOP,
#       containing an OTP 'activate' script.
#       Superceded by $otp_name.
#       Defaults to $otp_name or as determined by Riak version.
#       Cleared on return from this script.
#
#   rt_src_name
#       A top-level riak_test source/build directory under $RIAK_TOP_DIR/..
#       Supercedes $rt_src_path.
#       Defaults to $rt_src_path or as determined by Riak version.
#       Cleared on return from this script.
#
#   rt_src_path
#       A top-level riak_test source/build directory.
#       Superceded by $rt_src_name.
#       Defaults to $rt_src_name or as determined by Riak version.
#       Cleared on return from this script.
#
#   rt_inst_root
#       The root of the git repo in which instances are installed for use by
#       riak_test.
#       Defaults to "$HOME/rt/riak".
#       Cleared on lenv() reset.
#   
#   rt_inst_name
#       Subdirectory of $rt_inst_root where builds are installed for testing.
#       Defaults to the basename of the Riak source tree.
#       Cleared on lenv() reset.
#
#   local_...
#       Variables with names matching the pattern 'local_[[:alnum:]_]+' are
#       cleared on return from this script.
#
#   env_local_unset
#       Parameters to 'unset' on return from this script.
#       Cleared on return from this script.
#
#   env_reset_unalias
#   env_reset_unset
#   env_reset_unsetf
#       Parameters to 'unalias', 'unset', and 'unset -f', respectively, during
#       reset_lenv() cleanup.
#       Cleared on lenv() reset.
#

RIAK_TOP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
[[ " $env_reset_unset " == *\ RIAK_TOP_DIR\ * ]] || env_reset_unset+=' RIAK_TOP_DIR'
export RIAK_TOP_DIR

if [[ -f "$RIAK_TOP_DIR/env.local" ]]
then
    . "$RIAK_TOP_DIR/env.local" || return $?
fi

[[ -n "$riak_vers" ]] || riak_vers="$(cut -d- -f2 <<< "${RIAK_TOP_DIR##*/}")"
for n in riak_vers riak_vers_major riak_vers_minor riak_vers_patch
do
    [[ " $env_reset_unset " == *\ $n\ * ]] || env_reset_unset+=" $n"
done
unset n

if [[ "$riak_vers" =~ ^[1-9][0-9]?\.[0-9]+\.[0-9]+$ ]]
then
    riak_vers_major="$(cut -d. -f1 <<<"$riak_vers")"
    riak_vers_minor="$(cut -d. -f2 <<<"$riak_vers")"
    riak_vers_patch="$(cut -d. -f3 <<<"$riak_vers")"
elif [[ "$riak_vers" =~ ^[1-9][0-9]?\.[0-9]+$ ]]
then
    riak_vers_major="$(cut -d. -f1 <<<"$riak_vers")"
    riak_vers_minor="$(cut -d. -f2 <<<"$riak_vers")"
    riak_vers_patch=0
else
    riak_vers="$(cd "$RIAK_TOP_DIR" && $GIT describe --tags | cut -d- -f2)"
    riak_vers_major="$(cut -d. -f1 <<<"$riak_vers")"
    riak_vers_minor="$(cut -d. -f2 <<<"$riak_vers")"
    riak_vers_patch="$(cut -d. -f3 <<<"$riak_vers")"
    [[ -n "$riak_vers_patch" ]] || riak_vers_patch=0
fi

. "$LOCAL_ENV_DIR/otp.install.base" || return $?

if [[ -n "$otp_name" ]]
then
    otp_activate="$otp_install_base/$otp_name/activate"
    unset otp_name otp_path
elif [[ -n "$otp_path" ]]
then
    if [[ ! -d "$otp_path" ]]
    then
        echo    "error: otp_path '$otp_path' is not a directory" >&2
        unset   otp_path
        return  2
    fi
    otp_activate="$(cd "$otp_path" && pwd)/activate"
    unset otp_path
else
    case "$riak_vers_major" in
        1)
            otp_activate="$otp_install_base/otp-15/activate"
            ;;
        2)
            otp_activate="$otp_install_base/otp-16/activate"
            ;;
        *)
            otp_activate="$otp_install_base/otp-19/activate"
            ;;
    esac
fi
for n in 18 19 17
do
    x="$otp_install_base/otp-$n/bin/escript"
    if [[ -f "$x" && -x "$x" ]]
    then
        deps_escript="$x"
        break
    fi
done
if [[ -z "$deps_escript" ]]
then
    x='/usr/local/bin/escript'
    if [[ -f "$x" && -x "$x" ]]
    then
        deps_escript="$x"
    fi
fi
unset n x

for n in otp_activate deps_escript
do
    [[ " $env_reset_unset " == *\ $n\ * ]] || env_reset_unset+=" $n"
done
unset n

if [[ ! -f "$otp_activate" ]]
then
    echo    "error: '$otp_activate' not present" >&2
    return  2
fi
if ! [[ -f "$deps_escript" && -x "$deps_escript" ]]
then
    echo    "error: no suitable deps escript found" >&2
    return  2
fi

if [[ -n "$rt_src_name" ]]
then
    if [[ ! -d "$RIAK_TOP_DIR/../$rt_src_name" ]]
    then
        echo    "error: rt_src_name '$rt_src_name' not found" >&2
        unset   rt_src_name rt_src_path
        return  2
    fi
    rt_src_path="$(cd "$RIAK_TOP_DIR/../$rt_src_name" && pwd)"
    unset rt_src_name
elif [[ -n "$rt_src_path" ]]
then
    if [[ ! -d "$rt_src_path" ]]
    then
        echo    "error: rt_src_path '$rt_src_path' is not a directory" >&2
        unset   rt_src_path
        return  2
    fi
    rt_src_path="$(cd "$rt_src_path" && pwd)"
else
    for n in \
        "riak_test-$riak_vers_major.$riak_vers_minor.$riak_vers_patch" \
        "riak_test-$riak_vers_major.$riak_vers_minor" \
        "riak_test-$riak_vers_major" \
        'riak_test-master' \
        'riak_test'
    do
        if [[ -d "$RIAK_TOP_DIR/../$n" ]]
        then
            rt_src_path="$(cd "$RIAK_TOP_DIR/../$n" && pwd)"
            break
        fi
    done
    unset n
    if [[ -z "$rt_src_path" ]]
    then
        echo    'error: no suitable riak_test directory found' >&2
        return  2
    fi
fi
[[ " $env_reset_unset " == *\ rt_src_path\ * ]] || env_reset_unset+=' rt_src_path'

. "$otp_activate" || return $?

if [[ "$riak_vers_major" -lt 3 ]]
then
    # ugly hack for leveldb
    EXCLUDE_OSX_RT_VERS_FLAG='true'
    [[ " $env_reset_unset " == *\ EXCLUDE_OSX_RT_VERS_FLAG\ * ]] \
        || env_reset_unset+=' EXCLUDE_OSX_RT_VERS_FLAG'
    export EXCLUDE_OSX_RT_VERS_FLAG
else
    unset EXCLUDE_OSX_RT_VERS_FLAG
fi
. "$LOCAL_ENV_DIR/env.tool.defaults" || return $?

[[ -n "$rt_inst_root" ]] || rt_inst_root="$HOME/rt/riak"
[[ -n "$rt_inst_name" ]] || rt_inst_name="${RIAK_TOP_DIR##*/}"
for n in rt_inst_root rt_inst_name
do
    [[ " $env_reset_unset " == *\ $n\ * ]] || env_reset_unset+=" $n"
done
unset n

deps()
{
    "$deps_escript" \
        "$TRB_PRJ_BASE/basho/erl_stuff/src/rebar_deps.erl" \
        "$@" "$RIAK_TOP_DIR"
}
env_reset_unsetf+=' deps'

rt_setup()
{
    local cwd="$(pwd)"
    printf 'Using OTP: %s %s\n' "$(which erl)" "$(which erlc)"
    local ver
    if [[ -f "$RIAK_TOP_DIR/rel/reltool.config" ]]
    then
        local scr
        scr="{ok, Conf} = file:consult(\"$RIAK_TOP_DIR/rel/reltool.config\"),"
        scr+=' Sys = proplists:get_value(sys, Conf),'
        scr+=' Fun = fun({rel, "riak", Ver, _}) -> io:put_chars(Ver);'
        scr+=' (_) -> ok end,'
        scr+=' lists:foreach(Fun, Sys),'
        scr+=' erlang:halt().'
        ver="$(erl -noshell -eval "$scr" 2>/dev/null)"
        [[ -n "$ver" ]] || ver="$(cd "$RIAK_TOP_DIR" && $GIT describe --tags)"
    else
        ver="$(cd "$RIAK_TOP_DIR" && $GIT describe --tags)"
    fi

    echo "builing '$RIAK_TOP_DIR'" \
    && cd "$RIAK_TOP_DIR" \
    && $MAKE clean \
    && rm -rf dev \
    && $GIT clean -fdqx -e /env -e /env.local -e /.idea/ -e '*.iml' -e '/*.txt' \
    && $MAKE stagedevrel \
    && \
    echo "installing '$rt_inst_root/$rt_inst_name'" \
    && cd "$rt_inst_root" \
    && $GIT reset --hard -q HEAD \
    && $GIT clean -fdq \
    && rm -rf "$rt_inst_name/dev" \
    && cp -pPR "$RIAK_TOP_DIR/dev" "$rt_inst_name/dev" \
    && printf '%s' "$ver" > "$rt_inst_name/VERSION" \
    && $GIT add -A "$rt_inst_name" \
    && $GIT commit -q -m 'riak_test init' --amend "$rt_inst_name"

    local ret=$?
    cd "$cwd"
    return $ret
}
env_reset_unsetf+=' rt_setup'

rt()
{
    local cur="$(pwd)"

    cd "$rt_src_path" \
    && ./riak_test "$@"

    local ret=$?
    cd "$cur"
    return $ret
}
rtb()
{
    local cur="$(pwd)"

    cd "$rt_src_path" \
    && $MAKE \
    && ./riak_test "$@"

    local ret=$?
    cd "$cur"
    return $ret
}
env_reset_unsetf+=' rt rtb'

alias lt="ls -1 $rt_src_path/tests/*.erl | $ESED 's/^.*\/([^/]+)\.erl$/  -t \1/'"
alias xrt="rm -rf $rt_src_path/log*/* && rt"
alias xrtb="rm -rf $rt_src_path/log*/* && rtb"
alias xrta="rm -rf $rt_src_path/log*/* && rtb -d $rt_src_path/ebin"
env_reset_unalias+=' lt xrt xrtb xrta'

alias rd="cd $RIAK_TOP_DIR"
alias vclean="cd $RIAK_TOP_DIR && $GIT clean -f -f -dqx -e /env -e /env.local -e /.idea/ -e '*.iml' -e '/*.txt' && hash -r"
env_reset_unalias+=' rd vclean'

s()
{
    ss

    printf "$env_ss_format" 'rt_setup' 'clean, build, and stage instance to rt'
    echo ''
    printf "$env_ss_format" 'deps' '[Opts]  run rebar_deps Opts $RIAK_TOP_DIR'
    printf "$env_ss_format" 'lt' 'list riak_test tests'
    printf "$env_ss_format" 'rt' 'cd to the riak_test directory and run riak_test'
    printf "$env_ss_format" 'rtb' 'build and run riak_test'
    printf "$env_ss_format" 'xrt' 'delete test logs and run riak_test'
    printf "$env_ss_format" 'xrtb' 'delete test logs, build and run riak_test'
    printf "$env_ss_format" 'xrta' 'delete test logs, build and run all tests'
    echo ''
    printf "$env_ss_format" 'rd' 'cd to the riak source directory'
    printf "$env_ss_format" 'vclean' 'clean ee build tree without mercy!'
    echo ''
}
env_reset_unsetf+=' s'
