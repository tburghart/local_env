#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 2015-2016 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# Work with Riak CS
#
# Refer to files in https://github.com/tburghart/local_env
#
# To be sourced in a Bash environment by 'lenv'
#
# Assumes a directory structure as set up by 'riak_cs.clean.init'
#

CS_TOP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
RIAK_TEST="$CS_TOP_DIR/riak_test"
RT_TOP_DIR="$CS_TOP_DIR/rt"
RT_CONFIG="$CS_TOP_DIR/rt.config"
env_reset_unset+=' CS_TOP_DIR RT_CONFIG RT_TOP_DIR RIAK_TEST'
export CS_TOP_DIR RT_TOP_DIR RT_CONFIG RIAK_TEST

env_eq_delim='========================'
env_reset_unset+=' env_eq_delim'

if [[ -z "$CS_RUNNABLE" ]]
then
    CS_RUNNABLE='false'
    env_reset_unset+=' CS_RUNNABLE'
    export CS_RUNNABLE
fi

kerl_deactivate 2>/dev/null || true

if $CS_RUNNABLE
then
    env_reset_path="$PATH"
    env_reset_unset+=' env_reset_path'
fi
otp_15_base='/opt/basho/otp-15-p1'
otp_16_base='/opt/basho/otp-16-b10'
env_reset_unset+=' otp_15_base otp_16_base'

. "$otp_15_base/activate" || return $?
. "$otp_16_base/activate" || return $?

[[ "$(ulimit -n)" -ge 65536 ]] || ulimit -n 65536 2>/dev/null || true

cs_prev='1.5'
ee_prev='1.4'
os_prev='1.4'
st_prev='1.5'
env_reset_unset+=' cs_prev ee_prev os_prev st_prev'

cs_curr="$(basename $(/bin/ls -1d $CS_TOP_DIR/riak_cs-?.? | sort | tail -1) | cut -d- -f2)"
ee_curr="$(basename $(/bin/ls -1d $CS_TOP_DIR/riak_ee-?.? | sort | tail -1) | cut -d- -f2)"
os_curr="$(basename $(/bin/ls -1d $CS_TOP_DIR/riak-?.? | sort | tail -1) | cut -d- -f2)"
st_curr="$(basename $(/bin/ls -1d $CS_TOP_DIR/stanchion-?.? | sort | tail -1) | cut -d- -f2)"
env_reset_unset+=' cs_curr ee_curr os_curr st_curr'

CS_CURR_DIR="$CS_TOP_DIR/riak_cs-$cs_curr"
CS_RIAK_TEST="$CS_CURR_DIR/riak_test"
env_reset_unset+=' CS_CURR_DIR CS_RIAK_TEST'
export CS_CURR_DIR CS_RIAK_TEST

if $CS_RUNNABLE
then
    PATH="$CS_TOP_DIR/stanchion-$st_curr/rel/stanchion/bin:$PATH"
    PATH="$CS_TOP_DIR/riak_ee-$ee_curr/rel/riak/bin:$PATH"
    PATH="$CS_CURR_DIR/rel/riak-cs/bin:$PATH"
    export PATH
fi

RIAK_CS_EE_DEPS=true
env_reset_unset+=' RIAK_CS_EE_DEPS'
export RIAK_CS_EE_DEPS

# ugly hack for leveldb
EXCLUDE_OSX_RT_VERS_FLAG='true'
. "$LOCAL_ENV_DIR/env.tool.defaults"
unset EXCLUDE_OSX_RT_VERS_FLAG

foreach()
{
    if [[ $# -lt 1 || "$1" == -* ]]
    then
        echo 'Usage: foreach <commands>' >&2
        if [[ $# -gt 0 ]]
        then
            echo 'Executes <commands> in each of riak, riak_ee, stanchion, and riak_cs source trees' >&2
            echo 'Commands are separated on whitespace, including embedded' >&2
        fi
        return 1
    fi
    local cwd="$(pwd)"
    local ret=0
    local dir tmp

    for dir in \
        "$CS_TOP_DIR/riak-$os_curr" \
        "$CS_TOP_DIR/riak_ee-$ee_curr" \
        "$CS_TOP_DIR/stanchion-$st_curr" \
        "$CS_CURR_DIR"
    do
        cd "$dir"
        printf '*** In %s\n' "$(pwd)"
        $*
        tmp=$?
        [[ $tmp -eq 0 ]] || ret=$tmp
    done

    cd "$cwd"
    return $ret
}
env_reset_unsetf+=' foreach'

update_ee_dev()
{
    local ee_etc="$1/etc"
    local cs_ebin="$2/ebin"
    local dir kv key tmp
    for dir in "$ee_etc" "$cs_ebin"
    do
        if [[ ! -d "$dir" ]]
        then
            echo "update_ee_dev: error: '$dir' is not a directory" >&2
            return 2
        fi
    done
    for kv in \
        'buckets.default.allow_mult = true' \
        'buckets.default.merge_strategy = 2' \
        'cs_version = 20100' \
        'storage_backend = prefix_multi'
    do
        key="${kv%%[ =]*}"
        key="${key//./\\.}"
        if egrep -q "^[[:space:]#]*${key}[[:space:]]*=" "$ee_etc/riak.conf"
        then
            $ESED -i "s/^[[:space:]#]*${key}[[:space:]]*=.*\$/${kv}/" "$ee_etc/riak.conf"
        else
            printf "# For Riak CS\\n${kv}\\n" >> "$ee_etc/riak.conf"
        fi
    done
    if egrep -q '^[[:space:]]*\{[[:space:]]*riak_kv[[:space:]]*,' "$ee_etc/advanced.config"
    then
        if egrep -q \
            '^[[:space:]]*\{[[:space:]]*add_paths[[:space:]]*,[[:space:]]*\["[^"]+/ebin"\]' \
            "$ee_etc/advanced.config"
        then
            $ESED -i \
                "s!^([[:space:]]*\\{[[:space:]]*add_paths[[:space:]]*,[[:space:]]*\\[\")[^\"]+/ebin(\"\\].*)\$!\1${cs_ebin}\2!" \
                "$ee_etc/advanced.config"
        else
            echo "update_ee_dev: error: can't grok '$ee_etc/advanced.config'" >&2
            return 3
        fi
    else
        tmp="$(mktemp /tmp/ac.XXXXXXX)"
        awk -v "cs_ebin=$cs_ebin" 'BEGIN { changed = 0 } {
            if ( NF == 1 && changed == 0 && $1 == "[" ) {
                printf("[\n {riak_kv, [\n  {add_paths, [\"%s\"]}\n ]},\n\n", cs_ebin)
                changed += 1
            } else print }' \
        "$ee_etc/advanced.config" > "$tmp"
        cat "$tmp" > "$ee_etc/advanced.config"
        rm -f "$tmp"
    fi
}
env_reset_unsetf+=' update_ee_dev'

alias update_ee_rel="update_ee_dev $CS_TOP_DIR/riak_ee-$ee_curr/rel/riak $CS_CURR_DIR"
env_reset_unalias+=' update_ee_rel'

rt_setup_devrel()
{
    if [[ "$1" == '-l' ]]
    then
        local targets='locked-deps'
        shift
    else
        local targets='deps'
    fi
    local source="$1"
    local rtroot="${2%/*}"
    local rtvers="${2##*/}"
    local current="$(pwd)"

    if [[ ! -f "$source/Makefile" ]]
    then
        echo "error: missing '$source/Makefile'" >&2
        return 2
    fi
    if [[ "$targets" != 'deps' ]] && ! egrep -q \
        "^[[:space:]]*${targets}[[:space:]:]" "$source/Makefile"
    then
        targets='deps'
    fi
    if egrep -q \
        '^([^#]*[[:space:]:])?stagedevrel[[:space:]:]' "$source/Makefile"
    then
        targets+=' stagedevrel'
    else
        targets+=' devrel'
    fi
    printf '%s\nUsing OTP: %s %s\n' \
        "$env_eq_delim" "$(which erl)" "$(which erlc)"

    printf "Building '%s' ...\\n%s\\n" "$source" "$env_eq_delim" \
    && cd "$source" \
    && $MAKE clean \
    && /bin/rm -rf deps dev \
    && $GIT clean -f -f -dqx \
        -e /env -e /env.local -e /.idea/ -e '*.iml' -e '/*.txt' \
    && echo $MAKE $targets \
    && $MAKE $targets \
    && \
    printf "%s\\nInstalling '%s' ...\\n" "$env_eq_delim" "$rtroot/$rtvers" \
    && cd "$rtroot" \
    && $GIT reset --hard -q HEAD \
    && $GIT clean -f -f -dq \
    && /bin/rm -rf "$rtvers/dev" \
    && $ECP -PR "$source/dev" "$rtvers/dev" \
    && printf "$(cd "$source" && $GIT describe --tags)" > "$rtvers/VERSION" \
    && $GIT add -A "$rtvers" \
    && $GIT commit -q -m 'riak_test init' --amend "$rtvers" \
    && \
    printf 'Done.\n%s\n' "$env_eq_delim"

    local ret=$?
    cd "$current"
    return $ret
}
rt_setup_cs_devrels()
{
    if [[ "$1" == '-l' ]]
    then
        local ldeps="$1"
        shift
    else
        local ldeps=''
    fi
    local ver="$1"
    local ced="$RIAK_CS_EE_DEPS"
    local ret

    unset RIAK_CS_EE_DEPS
    rt_setup_devrel $ldeps "$CS_TOP_DIR/riak_cs-$ver" "$RT_TOP_DIR/riak_cs_os/$ver"
    ret=$?
    if [[ $ret -eq 0 ]]
    then
        export RIAK_CS_EE_DEPS='true'
        rt_setup_devrel $ldeps "$CS_TOP_DIR/riak_cs-$ver" "$RT_TOP_DIR/riak_cs_ee/$ver"
        ret=$?
    fi
    if [[ "$RIAK_CS_EE_DEPS" != "$ced" ]]
    then
        if [[ -z "$ced" ]]
        then
            unset RIAK_CS_EE_DEPS
        else
            export RIAK_CS_EE_DEPS="$ced"
        fi
    fi

    return $ret
}
rt_setup()
{
    if [[ "$1" == '-l' ]]
    then
        local ldeps="$1"
        shift
    else
        local ldeps=''
    fi
    . "$otp_16_base/activate"

    rt_setup_devrel $ldeps "$CS_TOP_DIR/riak-$os_curr" "$RT_TOP_DIR/riak/$os_curr" \
    && \
    rt_setup_devrel $ldeps "$CS_TOP_DIR/riak_ee-$ee_curr" "$RT_TOP_DIR/riak_ee/$ee_curr" \
    && \
    rt_setup_devrel $ldeps "$CS_TOP_DIR/stanchion-$st_curr" "$RT_TOP_DIR/stanchion/$st_curr" \
    && \
    rt_setup_cs_devrels $ldeps "$cs_curr"
}
rt_setup_prev()
{
    if [[ "$1" == '-l' ]]
    then
        local ldeps="$1"
        shift
    else
        local ldeps=''
    fi
    . "$otp_15_base/activate"

    rt_setup_devrel $ldeps "$CS_TOP_DIR/riak-$os_prev" "$RT_TOP_DIR/riak/$os_prev" \
    && \
    rt_setup_devrel $ldeps "$CS_TOP_DIR/riak_ee-$ee_prev" "$RT_TOP_DIR/riak_ee/$ee_prev" \
    && \
    rt_setup_devrel $ldeps "$CS_TOP_DIR/stanchion-$st_prev" "$RT_TOP_DIR/stanchion/$st_prev" \
    && \
    rt_setup_cs_devrels $ldeps "$cs_prev"

    local ret=$?
    . "$otp_16_base/activate"
    return $ret
}
env_reset_unsetf+=' rt_setup_devrel rt_setup_cs_devrels rt_setup rt_setup_prev'

rt_setup_cs()
{
    if [[ "$1" == '-l' ]]
    then
        local ldeps="$1"
        shift
    else
        local ldeps=''
    fi
    . $otp_16_base/activate \
    && rt_setup_cs_devrels $ldeps "$cs_curr"
}
rt_setup_ee()
{
    if [[ "$1" == '-l' ]]
    then
        local ldeps="$1"
        shift
    else
        local ldeps=''
    fi
    . $otp_16_base/activate \
    && rt_setup_devrel $ldeps "$CS_TOP_DIR/riak_ee-$ee_curr" "$RT_TOP_DIR/riak_ee/$ee_curr"
}
rt_setup_os()
{
    if [[ "$1" == '-l' ]]
    then
        local ldeps="$1"
        shift
    else
        local ldeps=''
    fi
    . $otp_16_base/activate \
    && rt_setup_devrel $ldeps "$CS_TOP_DIR/riak-$os_curr" "$RT_TOP_DIR/riak/$os_curr"
}
rt_setup_st()
{
    if [[ "$1" == '-l' ]]
    then
        local ldeps="$1"
        shift
    else
        local ldeps=''
    fi
    . $otp_16_base/activate \
    && rt_setup_devrel $ldeps "$CS_TOP_DIR/stanchion-$st_curr" "$RT_TOP_DIR/stanchion/$st_curr"
}
env_reset_unsetf+=' rt_setup_cs rt_setup_ee rt_setup_os rt_setup_st'

rt_vers()
{
    local cwd="$(pwd)"
    local fmt='%-23s : %s\n'
    local pkg ver
    cd "$RIAK_TEST"
    printf "$fmt" "${RIAK_TEST#${CS_TOP_DIR}/}" "$($GIT describe --tags)"
    cd "$CS_TOP_DIR"
    for pkg in rt/*
    do
        [[ -d "$pkg" ]] || continue
        if [[ "$1" == '-a' ]]
        then
            for ver in $pkg/*/VERSION
            do
                [[ -n "$ver" && -f "$ver" ]] || continue
                printf "$fmt" "${ver%/*}" "$(< "$ver")"
            done
        else
            ver="$(/bin/ls -1d $pkg/*/VERSION 2>/dev/null | sort | tail -1)"
            [[ -n "$ver" && -f "$ver" ]] || continue
            printf "$fmt" "${ver%/*}" "$(< "$ver")"
        fi
    done
    cd "$cwd"
}
env_reset_unsetf+=' rt_vers'

if $CS_RUNNABLE
then
    start()
    {
        local n r
        for n in riak stanchion riak-cs
        do
            $n start
            r=$?
            [[ $r -eq 0 ]] || return $r
            echo $n started.
        done
    }
    stop()
    {
        local n c r=0
        for n in riak-cs stanchion riak
        do
            $n stop
            c=$?
            if [[ $c -ne 0 ]]
            then
                [[ $r -ne 0 ]] || r=$c
                echo $n error: $c
            else
                echo $n stopped.
            fi
        done
        return $r
    }
    env_reset_unsetf+=' start stop'
fi

rt()
{
    local cwd="$(pwd)"

    . "$otp_16_base/activate"

    local cfg="$($ESED -n \
        's/^.*[[:space:]](-c|--conf)[[:space:]]+([[:lower:]][[:alnum:]_]*)[[:space:]].*$/\2/p' \
        <<<" $* ")"
    local ced="$RIAK_CS_EE_DEPS"

    local not=''
    if [[ "$cfg" == *_os || "$cfg" == *_os_* ]]
    then
        unset RIAK_CS_EE_DEPS
        not="$(/bin/ls -1 \
            $CS_CURR_DIR/deps/riak_cs_multibag/riak_test/tests/*.erl \
            2>/dev/null | $ESED 's/^.*\/([^/]+)\.erl$/\1/' | tr '\n' ',')"
        [[ -z "$not" ]] || not="-x ${not%,}"
    else
        export RIAK_CS_EE_DEPS='true'
    fi

    cd "$CS_TOP_DIR/riak_test" \
    && "$CS_TOP_DIR/riak_test/riak_test" -F "$RT_CONFIG" "$@" $not
    local ret=$?

    if [[ "$RIAK_CS_EE_DEPS" != "$ced" ]]
    then
        if [[ -z "$ced" ]]
        then
            unset RIAK_CS_EE_DEPS
        else
            export RIAK_CS_EE_DEPS="$ced"
        fi
    fi

    cd "$cwd"
    return $ret
}
rtb()
{
    local cwd="$(pwd)"

    . "$otp_16_base/activate" \
    && cd "$CS_CURR_DIR" \
    && ./rebar skip_deps=true riak_test_compile \
    && rt "$@"

    local ret=$?
    cd "$cwd"
    return $ret
}
rt_all()
{
    local configs
    if [[ $# -gt 0 ]]
    then
        configs="$*"
    else
        configs="$($ESED -n 's/^\{([[:alnum:]_]+)[[:space:]]*,.*$/\1/p' \
            $RT_CONFIG | $EGREP -vw 'default')"
    fi
    local tests="$CS_RIAK_TEST/ebin"
    local logs="$CS_TOP_DIR/log"
    [[ -d "$logs" ]] || /bin/mkdir "$logs"

    local cwd="$(pwd)"
    . "$otp_16_base/activate" \
    && cd "$CS_CURR_DIR" \
    && ./rebar skip_deps=true riak_test_compile
    local ret=$?
    cd "$cwd"
    [[ $ret -eq 0 ]] || return $ret

    local tmp="$(mktemp /tmp/rta.XXXXXXX)"
    local beg cfg elp end idx log tgt trc
    for cfg in $configs
    do
        log="$logs/rt.log.$cfg.txt"
        prv="$logs/rt.log.$cfg.%u.txt"
        if [[ -f "$log" ]]
        then
            idx=0
            while [[ $idx -lt 3 ]]
            do
                [[ -f "$(printf "$prv" $idx)" ]] || break
                idx=$(($idx + 1))
            done
            while [[ $idx -gt 0 ]]
            do
                tgt=$idx
                idx=$(($idx - 1))
                /bin/mv "$(printf "$prv" $idx)" "$(printf "$prv" $tgt)"
            done
            /bin/mv "$log" "$(printf "$prv" $idx)"
        fi
        printf 'running rt -c %s -d %s ...' "$cfg" "$tests"
        beg="$(date '+%s' && date)"
        rt -c "$cfg" -d "$tests" 1>"$tmp" 2>&1
        trc=$?
        end="$(date '+%s' && date)"
        printf ' done.\n'
        [[ $ret -ne 0 ]] || trc=$tmp

        elp="$((${end%%[[:space:]]*} - ${beg%%[[:space:]]*}))"
        beg="${beg#*[[:space:]]}"
        end="${end#*[[:space:]]}"
        printf '%s\n%s\nriak_test -c %s -d %s\nUsing:\n' \
            "$env_eq_delim" "$beg" "$cfg" "$tests" > "$log"
        rt_vers -a >> "$log"
        printf '%s\n' "$env_eq_delim" >> "$log"
        env | sort >> "$log"
        printf '%s\n' "$env_eq_delim" >> "$log"
        LANG=C tr -d '\r' < "$tmp" >> "$log"
        printf '%s\n%s\nElapsed: %02u:%02u:%02u\n%s\n' \
            "$env_eq_delim" "$end" \
            "$(($elp / 3600))" "$((($elp / 60) % 60))" "$(($elp % 60))" \
            "$env_eq_delim" >> "$log"
        printf '  logged to %s\n' "$log"

    done
    /bin/rm -rf $CS_TOP_DIR/riak_test/log*/* "$tmp"
    return $ret
}
env_reset_unsetf+=' rt rtb rt_all'

alias cs="cd $CS_CURR_DIR"
alias cst="cd $CS_RIAK_TEST"
alias ee="cd $CS_TOP_DIR/riak_ee-$ee_curr"
alias os="cd $CS_TOP_DIR/riak-$os_curr"
alias st="cd $CS_TOP_DIR/stanchion-$st_curr"
alias ct="cd $CS_TOP_DIR"
env_reset_unalias+=' cs cst ee os st ct'

alias lsc="$ESED -n 's/^\{([[:alnum:]_]+)[[:space:]]*,.*$/  -c \1/p' $RT_CONFIG"
alias lst="/bin/ls -1 $CS_RIAK_TEST/tests/*.erl | $ESED 's/^.*\/([^/]+)\.erl$/  -t \1/'"
env_reset_unalias+=' lsc lst'

alias rtl="e $CS_TOP_DIR/riak_test/log/test.log"
alias xrt="/bin/rm -rf $CS_TOP_DIR/riak_test/log*/* && rt"
alias xrtb="/bin/rm -rf $CS_TOP_DIR/riak_test/log*/* && rtb"
alias xrta="/bin/rm -rf $CS_TOP_DIR/riak_test/log*/* && rt -d $CS_RIAK_TEST/ebin"
env_reset_unalias+=' rtl xrt xrta xrtb'

if [[ -f '/usr/local/bin/s3cmd' ]]
then
    alias s3="/usr/local/bin/s3cmd -c $CS_TOP_DIR/s3cmd.cfg"
    env_reset_unalias+=' s3'
fi

alias r15=". $otp_15_base/activate"
alias r16=". $otp_16_base/activate"
env_reset_unalias+=' r15 r16'

# get value with shrc_longest <this-file>, round up to odd number
local_longest_command=19
if [[ $local_longest_command -gt $env_ss_length_default ]]
then
    env_ss_format="$(printf "$env_ss_format_format" $local_longest_command)"
fi
unset local_longest_command

s()
{
    ss

    printf "$env_ss_format" 'rt_setup_devrel' '[-l == locked-deps] <source> <rt-dest>  build/install the source package to rt'
    printf "$env_ss_format" 'rt_setup_cs_devrels' '[-l == locked-deps] <cs-suffix>  build/install ee and os CS to rt'
    printf "$env_ss_format" 'update_ee_dev' '<ee-node> <cs-root>  set up ee node to use cs'
    printf "$env_ss_format" 'update_ee_rel' 'update the current riak_ee/rel to use current cs'
    echo ''
    if [[ "$(typeof s3)" != 'undefined' ]]
    then
        printf "$env_ss_format" 's3' 's3cmd'
    fi
    echo ''
    printf "$env_ss_format" 'rt_setup_prev' '[-l == locked-deps]  build/install previous cs/ee/os/stanchion in rt'
    printf "$env_ss_format" 'rt_setup' '[-l == locked-deps]  build/install current cs/ee/os/stanchion in rt'
    printf "$env_ss_format" 'rt_setup_cs' '[-l == locked-deps]  build/install current Riak CS in rt'
    printf "$env_ss_format" 'rt_setup_ee' '[-l == locked-deps]  build/install current Riak EE in rt'
    printf "$env_ss_format" 'rt_setup_os' '[-l == locked-deps]  build/install current Riak OSS in rt'
    printf "$env_ss_format" 'rt_setup_st' '[-l == locked-deps]  build/install current Stanchion in rt'
    printf "$env_ss_format" 'rt_vers' '[-a == all]  display latest/all versions in rt'
    echo ''
    if $CS_RUNNABLE
    then
        printf "$env_ss_format" 'start' 'start ee, stanchion, and cs'
        printf "$env_ss_format" 'stop' 'stop cs, stanchion, and ee'
        echo ''
    fi
    printf "$env_ss_format" 'cs' "cd riak_cs-$cs_curr"
    printf "$env_ss_format" 'cst' "cd riak_cs-$cs_curr/riak_test"
    printf "$env_ss_format" 'ee' "cd riak_ee-$ee_curr"
    printf "$env_ss_format" 'os' "cd riak-$os_curr"
    printf "$env_ss_format" 'st' "cd stanchion-$st_curr"
    printf "$env_ss_format" 'ct' 'cd $CS_TOP_DIR'
    printf "$env_ss_format" 'foreach' '<commands>  run commands in each current source tree'
    printf "$env_ss_format" 'lsc' 'list cs test configs'
    printf "$env_ss_format" 'lst' 'list cs tests'
    printf "$env_ss_format" 'rt' '[params ...]  riak_test "$@"'
    printf "$env_ss_format" 'rtb' '[params ...]  build tests and run riak_test "$@"'
    printf "$env_ss_format" 'rt_all' '[config ...]  run all tests for all/specified configurations'
    printf "$env_ss_format" 'xrt' '[params ...]  delete test logs and run riak_test "$@"'
    printf "$env_ss_format" 'xrtb' '[params ...]  delete test logs, build tests and run riak_test "$@"'
    printf "$env_ss_format" 'xrta' '[-c config]  delete test logs, build and run all tests'
    printf "$env_ss_format" 'rtl' 'open riak_test test.log'
    echo ''
}
env_reset_unsetf+=' s'

reset_lenv()
{
    kerl_deactivate 2>/dev/null

    if [[ -n "$env_reset_path" ]]
    then
        PATH="$env_reset_path"
        unset env_reset_path
        export PATH
        hash -r
    fi
    if [[ -n "$env_reset_unalias" ]]
    then
        unalias $env_reset_unalias 2>/dev/null
        unset env_reset_unalias
        alias r15=". $LOCAL_OTP_DIR/otp-15/activate"
        alias r16=". $LOCAL_OTP_DIR/otp-16/activate"
    fi
    if [[ -n "$env_reset_unsetf" ]]
    then
        unset -f $env_reset_unsetf 2>/dev/null
        unset env_reset_unsetf
    fi
    if [[ -n "$env_reset_unset" ]]
    then
        unset $env_reset_unset 2>/dev/null
        unset env_reset_unset
    fi
    env_ss_format="$env_ss_format_default"
    unset -f reset_lenv
}
