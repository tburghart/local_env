#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 2014-2019 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# Build/install environment for wxWidgets from GitHub
#
#   Clone from: https://github.com/wxWidgets/wxWidgets.git
#

if [[ -z "$WXWIDGETS_SOURCE" ]]
then
    WXWIDGETS_SOURCE="$lenv_current"
    [[ " $env_reset_unset " == *\ WXWIDGETS_SOURCE\ * ]] || env_reset_unset+=' WXWIDGETS_SOURCE'
fi
export  WXWIDGETS_SOURCE

[[ ! -f "$lenv_current/env.local" ]] || . "$lenv_current/env.local" || return $?

. "$LOCAL_ENV_DIR/wx.install.data"

EXCLUDE_OSX_RT_VERS_FLAG=true
EXCLUDE_CC_OPTIM_FLAG=true
. "$LOCAL_ENV_DIR/env.tool.defaults"
unset EXCLUDE_CC_OPTIM_FLAG EXCLUDE_OSX_RT_VERS_FLAG

wxwidgets_clean="$GIT clean -fdqx"
if [[ "$($GIT --version | $ESED \
    's/^[[:alpha:] ]*[[:space:]]([[:digit:]]+)[^[:digit:]].*$/\1/')" -gt 1 ]]
then
    wxwidgets_clean+=' -e /env -e /env.local'
    wxwidgets_clean+=' -e .tm_properties -e /.idea/ -e \*.iml -e \*.txt'
fi
[[ " $env_reset_unset " == *\ wxwidgets_clean\ * ]] || env_reset_unset+=' wxwidgets_clean'

alias vclean="cd $WXWIDGETS_SOURCE && $wxwidgets_clean"
[[ " $env_reset_unalias " == *\ vclean\ * ]] || env_reset_unalias+=' vclean'

case "$os_type" in
    linux)
        CFLAGS+=' -fPIC'
        CCFLAGS+=' -fPIC'
        CXXFLAGS+=' -fPIC'
        export CFLAGS CCFLAGS CXXFLAGS
        ;;
esac

#
# _update_vsn <branch|tag>
#
# Build, test, and install the tagged release or latest on <branch>
#
_update_vsn()
{
    local label
    case "$1" in
        wxwidgets-*)
            label="$1"
            ;;
        *)
            label="wxwidgets-$1"
            ;;
    esac
    local rec branch=''
    for rec in $wxwidgets_versions
    do
        if [[ "${rec%%=*}" == "$label" ]]
        then
            branch="${rec##*=}"
            break
        fi
    done
    if [[ -z "$branch" ]]
    then
        echo "error: unmapped version '$1'" >&2
        return 1
    fi
    cd "$WXWIDGETS_SOURCE"

    if [[ -f 'Makefile' ]]
    then
        echo "==> $MAKE clean"
        $MAKE clean || return $?
    fi

    echo "==> $wxwidgets_clean"
    $wxwidgets_clean || return $?

    echo "==> $GIT checkout --quiet --force $branch"
    $GIT checkout --quiet --force "$branch" || return $?

    echo "==> $GIT pull --quiet"
    $GIT pull --quiet || return $?

    echo "==> $GIT submodule --quiet update --init"
    $GIT submodule --quiet update --init || return $?

    local tag="$($GIT describe)"
    [[ -n "$tag" ]] || return 1

    local -a vsn=( $(tr -C '[:digit:]' ' ' <<<"${tag%%-*}") )
    tag="${vsn[*]}"
    tag="wxWidgets-v${tag// /.}"

    local dst="$wx_install_base/$tag"
    local cmd='./configure'
    cmd+=" --prefix=$dst"
    case "$(uname -s)" in
        Darwin)
            cmd+=' --with-osx_cocoa'
            cmd+=" --with-macosx-version-min=$(
                /usr/bin/sw_vers -productVersion | /usr/bin/cut -d. -f1,2)"
            cmd+=' --enable-macosx_arch=x86_64'
            ;;
    esac
    # One or the other - NEVER both!
    if false
    then
        cmd+=" --disable-shared"
    else
        cmd+=" --enable-monolithic"
    fi
    if [[ ${vsn[0]} -gt 2 ]] || [[ ${vsn[0]} -eq 2 && ${vsn[1]} -gt 8 ]]
    then
        cmd+=" --enable-compat28"
    fi
    if [[ ${vsn[0]} -gt 3 ]] || [[ ${vsn[0]} -eq 3 && ${vsn[1]} -gt 0 ]]
    then
        cmd+=" --enable-compat30"

        # As of this commit there's some autoconf stupidity on master
        # that causes the build to blow up on macOS
    fi

    echo "==> $cmd"
    $cmd || return $?

    echo "==> $MAKE"
    $MAKE || return $?

    local old="$dst.prev"
    if [[ -d "$dst" ]]
    then
        [[ ! -d "$old" ]] || /bin/rm -rf "$old" || return $?
        echo "==> /bin/mv '$dst' '$old'"
        /bin/mv "$dst" "$old" || return $?
    fi
    echo "==> $MAKE install"
    $MAKE install || return $?

    if [[ ! -f "$wx_install_base/$tag" || -L "$wx_install_base/$tag" ]]
    then
        echo "==> /bin/ln -fs '$tag' '$wx_install_base/$label'"
        /bin/ln -fns "$tag" "$wx_install_base/$label" || return $?
    else
        echo "!!! $wx_install_base/$tag exists and is not a symlink - skipping"
    fi
}
[[ " $env_reset_unsetf " == *\ _update_vsn\ * ]] || env_reset_unsetf+=' _update_vsn'

update_inst()
{
    local -a vsns
    if [[ $# -eq 0 ]]
    then
        local rec="$(awk '{print $NF}' <<<"$wxwidgets_versions")"
        vsns=("${rec%%=*}")
    elif [[ $# -eq 1 ]] && [[ "$1" == '-a' || "$1" == '--all' ]]
    then
        local rec
        for rec in $wxwidgets_versions
        do
            vsns+=("${rec%%=*}")
        done
    else
        vsns=("$@")
    fi
    local -i tmp
    for vsn in "${vsns[@]}"
    do
        _update_vsn "$vsn" || return $?
    done
}
[[ " $env_reset_unsetf " == *\ update_inst\ * ]] || env_reset_unsetf+=' update_inst'

s()
{
    ss

    printf "$env_ss_format" 'update_inst' '[-a|--all|version ...]  build/install all (or specified) versions'
    printf "$env_ss_format" 'vclean' 'deep clean build'
    echo ''
}
[[ " $env_reset_unsetf " == *\ s\ * ]] || env_reset_unsetf+=' s'
