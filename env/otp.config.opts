#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 2014-2018 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# Set up appropriate configure options for building OTP
#
# Sets the following environment variables:
#
#   otp_config_opts
#       The core configure options for the platform and version.
#
#   otp_hipe_supported
#       'true' or 'false' as appropriate for the platform and version.
#
#   otp_hipe_default
#       'true' or 'false' indicating whether unspecified builds should
#       enable or disable HiPE.
#

# variables that will be set here
unset otp_hipe_default otp_hipe_supported
for n in otp_config_opts otp_hipe_default otp_hipe_supported
do
    [[ " $env_local_unset " == *\ $n\ * ]] || env_local_unset+=" $n"
done
[[ -z "$otp_config_opts" ]] || return 0

for n in \
    os.type \
    otp.source.version \
    env.tool.defaults \
    ssl.install.data
do
    . "$LOCAL_ENV_DIR/$n"
done
unset n

addl_cc_flags=''

if [[ $otp_src_vsn_major -lt 19 && "$os_type" == 'darwin' ]]
then
    otp_config_opts='--enable-darwin-64bit --with-cocoa'
    # addl_cc_flags+=' -D_DARWIN_FEATURE_CLOCK_GETTIME=0'
elif [[ "$os_type" == 'sunos' ]]
then
    # autoconf may not figure out that we're on a 64-bit platform
    n="$(uname -r)"
    n="solaris$((${n%%.*} - 3)).${n#*.}"
    otp_config_opts="--build=x86_64-pc-$n --enable-m64-build"
    unset n
else
    otp_config_opts='--enable-m64-build'
fi

openssl_local=''
[[ $otp_src_vsn_major -lt 20 ]] || \
    openssl_local+=" /usr/local/openssl-1.1 $ssl_install_base/openssl-1.1"
openssl_local+=" /usr/local/openssl-1.0 $ssl_install_base/openssl-1.0"
openssl_local+=" /usr/local $ssl_install_base"

openssl_sdks=''
if [[ "$os_type" == 'darwin' ]]
then
    openssl_sdks+=' /Applications/Xcode.app/Contents/Developer/Toolchains'
    openssl_sdks+='/XcodeDefault.xctoolchain/usr/lib/swift-migrator/sdk/MacOSX.sdk/usr'
fi

openssl_flags=''
for openssl_base in $openssl_local
do
    if [[ -f "$openssl_base/include/openssl/crypto.h" ]]
    then
        openssl_flags="--with-ssl=$openssl_base --disable-dynamic-ssl-lib"
        break
    fi
done
if [[ -z "$openssl_flags" ]]
then
    if [[ -f '/usr/include/openssl/crypto.h' ]]
    then
        if [[ -f '/usr/lib/libcrypto.a' ]]
        then
            openssl_flags='--with-ssl --disable-dynamic-ssl-lib'
        else
            openssl_flags='--with-ssl'
        fi
    elif [[ -n "$openssl_sdks" ]]
    then
        for openssl_base in $openssl_sdks
        do
            if [[ -f "$openssl_base/include/openssl/crypto.h" ]]
            then
                if [[ -f "$openssl_base/usr/lib/libcrypto.a" ]]
                then
                    openssl_flags="--with-ssl=$openssl_base --disable-dynamic-ssl-lib"
                elif [[ $otp_src_vsn_major -ge 17 ]]
                then
                    openssl_flags="--with-ssl=/usr --with-ssl-incl=$openssl_base"
                else
                    openssl_flags="--with-ssl=$openssl_base"
                fi
                break
            fi
        done
    fi
    if [[ "$os_type" == 'linux' && -f /etc/redhat-release && ! -f /etc/fedora-release ]]
    then
        addl_cc_flags+=' -DOPENSSL_NO_EC=1'
    fi
fi
unset openssl_base openssl_local openssl_sdks
if [[ -z "$openssl_flags" ]]
then
    echo    'error: no OpenSSL SDK found!' >&2
    unset   openssl_flags
    return  2
fi
otp_config_opts+=" $openssl_flags"
unset openssl_flags

otp_hipe_supported='false'
case "$os_type" in
    'linux')
        if [[ $otp_src_vsn_major -ge 16 ]]
        then
            otp_hipe_supported='true'
        fi
        ;;
    'freebsd'|'sunos')
        if [[ $otp_src_vsn_major -ge 17 ]]
        then
            otp_hipe_supported='true'
        elif [[ $otp_src_vsn_major -ge 16 ]]
        then
            otp_hipe_supported='true'
            otp_hipe_default='false'
        fi
        ;;
esac
[[ -n "$otp_hipe_default" ]] || otp_hipe_default="$otp_hipe_supported"

if [[ $otp_src_vsn_major -eq 19 ]]
then
    otp_config_opts+=' --enable-dirty-schedulers'
fi
if [[ $otp_src_vsn_major -le 15 ]]
then
    otp_config_opts+=' --without-wx'
fi
if [[ $otp_src_vsn_major -ge 17 ]]
then
    otp_config_opts+=' --with-wx --without-gs'
fi
if [[ $otp_src_vsn_major -lt 18 ]]
then
    addl_cc_flags+=' -w'
fi

CFLAGS+="$addl_cc_flags"
CXXFLAGS+="$addl_cc_flags"
unset   addl_cc_flags
export  CFLAGS CXXFLAGS
