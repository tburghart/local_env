#!/usr/bin/false 'This file is meant to be sourced'
# shellcheck disable=SC2096 # shebangs can only specify a single parameter
[[ -z "$__sh_terminal_sourced" ]] || return 0
# ========================================================================
# Copyright (c) 1994-2024 T. R. Burghart.
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# .profile/.shrc fragment for Bourne-ish shells
#
# Maybe tell the terminal program where we are
#
# Assumptions about the shell per ./sh.shell
#
# Refer to https://github.com/tburghart/local_env
#
# Install to $HOME/etc/shell/sh.terminal
#
[[ -n "$__sh_interactive_sourced" ]] || . "$HOME/etc/shell/sh.interactive"

# We return out of the file in some non-continuable cases, so mark the file
# as sourced up front.
__sh_terminal_sourced=true

unset __sh_term_prog

#
# If it's a terminal that we can *maybe* tell about where we are, define a
# function to do so.
#
case "$TERM_PROGRAM" in
    Apple_Terminal)
        __sh_term_prog='apple'
        ;;
    iTerm.app)
        __sh_term_prog='iterm'
        ;;
    xterm|rxvt|gnome-terminal)
        __sh_term_prog='xterm'
        ;;
    *)
        pid=$$
        while true
        do
            # let echo strip leading/trailing whitespace
            pid="$(echo $(ps -o ppid -p $pid 2>/dev/null | tail -1))"
            [[ "$pid" == [0-9]* && "$pid" -gt 1 ]] || break
            # if we work it out, set TERM_PROGRAM so subshells skip this
            str="$(echo $(ps -o comm -p $pid 2>/dev/null | tail -1))"
            case "$str" in
                */Terminal.app/*/MacOS/*)
                    TERM_PROGRAM='Apple_Terminal'
                    export TERM_PROGRAM
                    __sh_term_prog='apple'
                    break
                    ;;
                */MacOS/iTerm*)
                    TERM_PROGRAM='iTerm.app'
                    export TERM_PROGRAM
                    __sh_term_prog='iterm'
                    break
                    ;;
                xterm|rxvt|gnome-terminal)
                    TERM_PROGRAM="$str"
                    export TERM_PROGRAM
                    __sh_term_prog='xterm'
                    break
                    ;;
                sshd|[\(\[]*)
                    # some system daemon, nothing to be found above here
                    break
                    ;;
            esac
        done
        unset pid str
        ;;
esac

case "$__sh_term_prog" in
    apple)
        # clear the Apple default if it's set
        unset -f update_terminal_cwd 2>/dev/null || true
        precmd()
        {
            printf '\e]0;%s@%s %s\a' "$LOGNAME" "$__sh_host" "$PWD"
        }
        ;;
    iterm)
        precmd()
        {
            printf '\e]1337;RemoteHost=%s@%s\a' "$LOGNAME" "$__sh_host"
            printf '\e]1337;CurrentDir=%s\a' "$PWD"
            printf '\e]0;%s@%s %s\e\' "$LOGNAME" "$__sh_host" "$PWD"
        }
        ;;
    xterm)
        precmd()
        {
            printf '\e]0;%s@%s %s\a' "$LOGNAME" "$__sh_host" "$PWD"
        }
        ;;
    *)
        if [[ "$TERM" != xterm* ]]
        then
            # if it's not xterm-ish don't even try
            return 0
        else
            # throw everything in and hope the terminal doesn't barf
            precmd()
            {
                printf '\e]1337;RemoteHost=%s@%s\a' "$LOGNAME" "$__sh_host"
                printf '\e]1337;CurrentDir=%s\a' "$PWD"
                printf '\e]7;file://%s%s\a' "$__sh_host" "$PWD"
                printf '\e]0;%s@%s %s\a' "$LOGNAME" "$__sh_host" "$PWD"
            }
        fi
        ;;
esac

# If we got here, function precmd() is defined to something that will *try* to
# feed info to the terminal.

unset __sh_term_prog

# We build invocation of precmd() into out ksh prompt, and zsh recognizes it
# directly, so bash is the only one needing more action.
[[ "$__sh_sh" != bash ]] || PROMPT_COMMAND='precmd'
