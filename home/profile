#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 1994-2016 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# .profile - Shell startup script for Bourne-ish login shells
#
# Refer to files in https://github.com/tburghart/local_env
#
# Install to $HOME/.profile
#

shome="$HOME"
stype="$(uname -s)"
mtype="$(uname -m)"
usern="${LOGNAME:-${USER:-$(id -un)}}"
unset_vars='shome stype mtype usern'

BASHO_PRJ_BASE="$HOME/prj/basho"
TRB_PRJ_BASE="$HOME/prj/tedb"
LOCAL_ENV_DIR="$TRB_PRJ_BASE/local_env/env"
for LOCAL_OTP_DIR in \
    '/opt/basho' '/opt/local' '/usr/local' \
    "$BASHO_PRJ_BASE/local" "$TRB_PRJ_BASE/local" "$HOME/local"
do
    if [[ -d "$LOCAL_OTP_DIR" && -w "$LOCAL_OTP_DIR" ]] ; then break ; fi
done
export BASHO_PRJ_BASE TRB_PRJ_BASE LOCAL_ENV_DIR LOCAL_OTP_DIR

pathbeg='/usr/local /opt/local /usr /opt'
pathend='/usr/local/cuda /usr/local/mysql'
pathadd=''
bpath=''
spath=''
unset_vars="$unset_vars pathbeg pathend pathadd bpath spath"

if [[ "$stype" == 'Darwin' && "$(sw_vers -productName)" == 'Mac OS X' ]]
then
    gui='OSX'
    if [[ -d "$HOME/bin/OsX" ]]
    then
        bpath="${bpath:+${bpath}:}$HOME/bin/OsX"
    fi
    if [[ -d "${HOME}/sbin/OsX" ]]
    then
        spath="${spath:+${spath}:}$HOME/sbin/OsX"
    fi
else
    if [[ "$stype" == 'SunOS' ]]
    then
        pathbeg='/usr/local /opt/local /usr/xpg6 /usr/xpg4 /usr /opt'
    fi
    pathend="/usr/X11R7 /usr/X11R6 $pathend"
    pathadd="$pathadd /usr/bin/X11R7 /usr/bin/X11R6 /usr/bin/X11"
fi
unset_vars="$unset_vars gui"

for d in "/$stype/$mtype" "/$stype" ''
do
    if [[ -d "$HOME/bin${d}" ]]
    then
        bpath="${bpath:+${bpath}:}${HOME}/bin${d}"
    fi
    if [[ -d "$HOME/sbin${d}" ]]
    then
        spath="${spath:+${spath}:}${HOME}/sbin${d}"
    fi
done
unset_vars="$unset_vars d"

bpath="${bpath:+${bpath}:}${LOCAL_ENV_DIR%/*}"

for d in $pathbeg ${PATH//:/ } / $pathend
do
    case "$d" in
        / )
            b='/bin'
            s='/sbin'
            ;;
        */bin )
            b="$d"
            s=''
            ;;
        */sbin )
            b=''
            s="$d"
            ;;
        * )
            b="$d/bin"
            s="$d/sbin"
            ;;
    esac
    if [[ -n "$b" && -d "$b" ]] && ! [[ "$bpath" =~ ^(.*:)?$b(:.*)?$ ]]
    then
        bpath="${bpath:+${bpath}:}$b"
    fi
    if [[ -n "$s" && -d "$s" ]] && ! [[ "$spath" =~ ^(.*:)?$s(:.*)?$ ]]
    then
        spath="${spath:+${spath}:}$s"
    fi
done
unset_vars="$unset_vars b s"

#
# handle explicit paths
#
for d in $pathadd
do
    if [[ -d "$d" ]] && ! [[ "$bpath" =~ ^(.*:)?$d(:.*)?$ ]]
    then
        bpath="${bpath:+${bpath}:}$d"
    fi
done

PATH="$bpath:$spath"
export PATH

[[ -n "$LANG" ]] || LANG='C'
if [[ -z "$ECP" ]]
then
    if [[ "$stype" == 'Darwin' ]]
    then
        ECP='/bin/cp -pX'
    else
        ECP='/bin/cp -p'
    fi
fi
[[ -n "$EGREP" ]] || EGREP="$(which egrep || echo egrep)"
if [[ -z "$ESED" ]]
then
    if [[ "$stype" == 'Linux' ]]
    then
        ESED='/usr/bin/sed -r'
    else
        ESED='/usr/bin/sed -E'
    fi
fi
[[ -n "$GIT" ]] || GIT="$(which git || echo git)"
if [[ -z "$MAKE" ]]
then
    case "$stype" in
        Darwin|Linux)
            MAKE="$(type -p /usr/bin/make \
                || which make || which gmake || echo make)"
            ;;
        *)
            MAKE="$(which gmake || which make || echo gmake)"
            ;;
    esac
fi
export ECP EGREP ESED GIT LANG MAKE

BLOCKSIZE=1024
for EDITOR in $(which vi) $(which nano) vi ; do break ; done
for PAGER in $(which less) $(which more) more ; do break ; done
export BLOCKSIZE EDITOR PAGER

if [[ -n "$SSH_TTY" ]]
then
    MATE="$(which rmate)"
else
    MATE="$(which mate)"
fi
if [[ -n "$MATE" ]]
then
    export MATE
    [[ -n "$VISUAL" ]] || VISUAL="$MATE --wait"
else
    unset MATE
    [[ -n "$VISUAL" ]] || VISUAL="$(which tedit || echo $EDITOR)"
fi
P4EDITOR="$VISUAL"
WINEDITOR="$VISUAL"
export VISUAL P4EDITOR WINEDITOR

# in case $HOME is changed along the way ...
if [[ "$HOME" != "$shome" ]]
then
    cd "$HOME"
fi

unset $unset_vars unset_vars 2>/dev/null

for ENV in "$HOME/.shrc" "${LOCAL_ENV_DIR%/*}/home/shrc" $ENV
do
    if [[ -f "$ENV" ]]
    then
        export ENV
        . "$ENV"
        # done, get out now to avoid 'unset' below
        return
    fi
done
unset ENV
