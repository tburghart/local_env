#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 1994-2016 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# .profile - Shell startup script for Bourne-ish login shells
#
# Refer to files in https://github.com/tburghart/local_env
#
# Install to $HOME/.profile
#

shome="$HOME"
stype="$(uname -s)"
mtype="$(uname -m)"
usern="${LOGNAME:-${USER:-$(id -un)}}"
if [[ -n "$__sh_sh" ]]
then
    shell="$__sh_sh"
else
    shell="${0#-}"
    shell="${shell##*/}"
    if [[ "$shell" != *sh && -n "$SHELL" ]]
    then
        shell="${SHELL##*/}"
    fi
fi
unset_vars='shell shome stype mtype usern'

otp_check='/opt/basho /opt/local /usr/local'
unset_vars="$unset_vars otp_check"

if [[ -d "$HOME/prj/basho" ]]
then
    BASHO_PRJ_BASE="$HOME/prj/basho"
    export BASHO_PRJ_BASE
    otp_check+=" $BASHO_PRJ_BASE/local"
fi
if [[ -d "$HOME/prj/tedb" ]]
then
    TRB_PRJ_BASE="$HOME/prj/tedb"
    export TRB_PRJ_BASE
    otp_check+=" $TRB_PRJ_BASE/local"

    if [[ -d "$TRB_PRJ_BASE/local_env" ]]
    then
        ledir="$TRB_PRJ_BASE/local_env"
        unset_vars="$unset_vars ledir"
        LOCAL_ENV_DIR="$ledir/env"
        export LOCAL_ENV_DIR
    fi
fi

for LOCAL_OTP_DIR in $otp_check $HOME/local
do
    [[ ! -d "$LOCAL_OTP_DIR" || ! -w "$LOCAL_OTP_DIR" ]] || break
done
export LOCAL_OTP_DIR

pathbeg="$ledir /usr/local /opt/local"
if [[ "$stype" == 'SunOS' ]]
then
    pathbeg="$pathbeg /usr/xpg6 /usr/xpg4"
fi
pathbeg="$pathbeg /usr /opt"
pathend='/usr/local/cuda /usr/local/mysql'
pathadd=''
bpath=''
spath=''
unset_vars="$unset_vars pathbeg pathend pathadd bpath spath"

if [[ "$stype" == 'Darwin' && "$(sw_vers -productName)" == 'Mac OS X' ]]
then
    gui='OSX'
    if [[ -d "$HOME/bin/OsX" ]]
    then
        bpath="${bpath:+${bpath}:}$HOME/bin/OsX"
    fi
    if [[ -d "${HOME}/sbin/OsX" ]]
    then
        spath="${spath:+${spath}:}$HOME/sbin/OsX"
    fi
else
    pathend="/usr/X11R7 /usr/X11R6 $pathend"
    pathadd="$pathadd /usr/bin/X11R7 /usr/bin/X11R6 /usr/bin/X11"
fi
unset_vars="$unset_vars gui"

for d in "/$stype/$mtype" "/$stype" ''
do
    if [[ -d "$HOME/bin${d}" ]]
    then
        bpath="${bpath:+${bpath}:}${HOME}/bin${d}"
    fi
    if [[ -d "$HOME/sbin${d}" ]]
    then
        spath="${spath:+${spath}:}${HOME}/sbin${d}"
    fi
done
unset_vars="$unset_vars d"

for d in $pathbeg ${PATH//:/ } / $pathend
do
    case "$d" in
        / )
            b='/bin'
            s='/sbin'
            ;;
        */bin )
            b="$d"
            s=''
            ;;
        */sbin )
            b=''
            s="$d"
            ;;
        * )
            b="$d/bin"
            s="$d/sbin"
            ;;
    esac
    if [[ -n "$b" && -d "$b" ]] && ! [[ "$bpath" =~ ^(.*:)?$b(:.*)?$ ]]
    then
        bpath="${bpath:+${bpath}:}$b"
    fi
    if [[ -n "$s" && -d "$s" ]] && ! [[ "$spath" =~ ^(.*:)?$s(:.*)?$ ]]
    then
        spath="${spath:+${spath}:}$s"
    fi
done
unset_vars="$unset_vars b s"

#
# handle explicit paths
#
for d in $pathadd
do
    if [[ -d "$d" ]] && ! [[ "$bpath" =~ ^(.*:)?$d(:.*)?$ ]]
    then
        bpath="${bpath:+${bpath}:}$d"
    fi
done

PATH="$bpath:$spath"
export PATH

[[ -n "$LANG" ]] || LANG='C'
if [[ -z "$ECP" ]]
then
    if [[ "$stype" == 'Darwin' ]]
    then
        ECP='/bin/cp -pX'
    else
        ECP='/bin/cp -p'
    fi
fi
[[ -n "$EGREP" ]] || EGREP="$(which egrep 2>/dev/null || echo egrep)"
if [[ -z "$ESED" ]]
then
    if [[ "$stype" == 'Linux' ]]
    then
        ESED='/usr/bin/sed -r'
    else
        ESED='/usr/bin/sed -E'
    fi
fi
[[ -n "$GIT" ]] || GIT="$(which git 2>/dev/null || echo git)"
if [[ -z "$MAKE" ]]
then
    case "$stype" in
        Darwin|Linux)
            MAKE="$(type -p /usr/bin/make \
                || which make 2>/dev/null || which gmake 2>/dev/null || echo make)"
            ;;
        *)
            MAKE="$(which gmake 2>/dev/null || which make 2>/dev/null || echo gmake)"
            ;;
    esac
fi
export ECP EGREP ESED GIT LANG MAKE

BLOCKSIZE=1024
for EDITOR in $(which vi 2>/dev/null) $(which vim 2>/dev/null) $(which nano 2>/dev/null) vi ; do break ; done
for PAGER in $(which less 2>/dev/null) $(which more 2>/dev/null) more ; do break ; done
export BLOCKSIZE EDITOR PAGER

if [[ -n "$SSH_TTY" ]]
then
    MATE="$(which rmate 2>/dev/null)"
else
    MATE="$(which mate 2>/dev/null)"
fi
if [[ -n "$MATE" ]]
then
    export MATE
    [[ -n "$VISUAL" ]] || VISUAL="$MATE --wait"
else
    unset MATE
    if [[ -z "$VISUAL" ]]
    then
        VISUAL="$(which tedit 2>/dev/null)"
        [[ -n "$VISUAL" ]] || VISUAL="$EDITOR"
    fi
fi
P4EDITOR="$VISUAL"
WINEDITOR="$VISUAL"
export VISUAL P4EDITOR WINEDITOR

case "$shell" in
    bash)
        # bash stupidly doesn't source its rc files from an interactive login shell
        if [[ "$-" = *i* || -n "$__sh_interactive" || -n "$PS1" ]]
        then
            for f in "$HOME/.bashrc" "$HOME/.shrc"
            do
                if [[ -f "$f" ]]
                then
                    if [[ "$f" != "$HOME/.bashrc" ]]
                    then
                        echo Warning: '***' non-standard environment file $f \
                            will not be sourced by interactive bash \
                            subshells, consider installing as $HOME/.bashrc
                    fi
                    . "$f"
                    break
                fi
            done
            unset_vars="$unset_vars f ENV"
        else
            unset_vars="$unset_vars ENV"
        fi
        ;;
    ksh)
        if [[ -z "$ENV" || "$ENV" = "$HOME/.kshrc" || ! -f "$ENV" ]]
        then
            if [[ ! -f "$HOME/.kshrc" && -f "$HOME/.shrc" ]]
            then
                ENV="$HOME/.shrc"
                export ENV
            else
                unset_vars="$unset_vars ENV"
            fi
        fi
        ;;
    sh)
        if [[ -z "$ENV" || ! -f "$ENV" ]]
        then
            if [[ -f "$HOME/.shrc" ]]
            then
                ENV="$HOME/.shrc"
                export ENV
            else
                unset_vars="$unset_vars ENV"
            fi
        fi
        ;;
    zsh)
        if [[ ! -f "$HOME/.zshrc" && -o interactive && -f "$HOME/.shrc" ]]
        then
            echo Warning: '***' non-standard environment file $HOME/.shrc \
                will not be sourced by interactive zsh subshells, consider \
                installing as $HOME/.zshrc
            . "$HOME/.shrc"
        fi
        unset_vars="$unset_vars ENV"
        ;;
    *)
        unset_vars="$unset_vars ENV"
        ;;
esac

unset $unset_vars unset_vars 2>/dev/null
