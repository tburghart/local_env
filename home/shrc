#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 1994-2017 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# .shrc - Shell startup script for Bourne-ish login shells
#
# Refer to files in https://github.com/tburghart/local_env
#
# Install to $HOME/.shrc, or wherever $ENV points to
#
# Assume that I've chosen to use a relatively modern shell, so I don't
# have to protect against dinosaurs like the system-level files do
#
[[ -n "$PS1" ]] || return

#
# file permissions: rwxr-xr-x
#
umask	022

# what shell are we using?
# start with shells that may be emulating others
if [[ -n "$ZSH_VERSION" ]]
then
    __shrc_sh=zsh
elif [[ -n "$BASH_VERSION" ]]
then
    __shrc_sh=bash
elif [[ -n "$KSH_VERSION" ]]
then
    __shrc_sh=ksh
else
    __shrc_sh=sh
fi

if [[ $__shrc_sh = zsh && -r /etc/zshrc ]]
then
    true
elif [[ -r /etc/${__shrc_sh}rc ]]
then
    . /etc/${__shrc_sh}rc
elif [[ -r /etc/shrc ]]
then
    . /etc/shrc
fi

# if it's there, assume it's already been sourced
if [[ ! -r /usr/local/etc/sh.terminal ]]
then
    host="$(/bin/hostname | /usr/bin/cut -d. -f1)"
    user="${LOGNAME:-${USER:-$(/usr/bin/id -un)}}"
    if [[ $(/usr/bin/id -u) -eq 0 ]]
    then
        suff='$'
    else
        suff='#'
    fi
    # don't assume shells handle C-style escapes in double-quoted strings!
    suff="
$suff "
    case "$__shrc_sh" in
        bash)
            # bash format
            PS1="B \\t $user@$host \$PWD rc:\$?$suff"
            ;;
        ksh)
            # ksh don't know nuthin 'bout dates
            for __shrc_date in /bin/date /usr/bin/date date
            do
                [[ ! -f "$__shrc_date" ]] || break
            done
            PS1="K \$($__shrc_date '+%H:%M:%S') $user@$host \$PWD rc:\$?$suff"
            unset __shrc_date
            ;;
        zsh)
            # zsh format
            PS1="Z %D{%H:%M:%S} $user@$host %d rc:%?$suff"
            ;;
        *)
            # even this may be too much, but try it
            PS1="S $user@$host \$PWD rc:\$?$suff"
            ;;
    esac
    export PS1
fi

# shell-specific options and functions
case "$__shrc_sh" in
    bash)
        # bash specific
        set -o vi
        shopt -s histappend
        
        alias whence='type -p'
        alias which='type -p'
        typeof()
        {
            if [[ $# -ne 1 ]]
            then
                echo 'usage: typeof <name>' >&2
                return 1
            fi
            local t="$(type -t "$1")"
            if [[ -z "$t" ]]
            then
                echo undefined
            else
                echo "$t"
            fi
        }
        ;;
    ksh)
        # ksh specific
        set -o vi
        set -o vi-tabcomplete
    	alias which='whence'
        typeof()
        {
            if [[ $# -ne 1 ]]
            then
                echo 'usage: typeof <name>' >&2
                return 1
            fi
            t="$(whence -v "$1" 2>/dev/null)"
            case "$t" in
                *\ tracked\ alias\ *)
                    echo file
                    ;;
                *\ alias\ *)
                    echo alias
                    ;;
                *\ builtin)
                    echo builtin
                    ;;
                *\ function)
                    echo function
                    ;;
                *\ keyword)
                    echo keyword
                    ;;
                '')
                    echo undefined
                    ;;
                *)
                    echo file
                    ;;
            esac
            unset t
        }
        ;;
    zsh)
        # zsh specific
        set -o append_history
        set -o hist_ignore_all_dups
        set -o hist_reduce_blanks
        set -o hist_save_no_dups
        set -o inc_append_history
        set -o vi
        bindkey -v
        bindkey -M vicmd 'k' vi-up-line-or-history
        bindkey -M vicmd 'j' vi-down-line-or-history
        typeof()
        {
            if [[ $# -ne 1 ]]
            then
                echo 'usage: typeof <name>' >&2
                return 1
            fi
            t="$(whence -v "$1")"
            case "$t" in
                *\ not\ found)
                    echo undefined
                    ;;
                *\ alias\ *)
                    echo alias
                    ;;
                *\ builtin)
                    echo builtin
                    ;;
                *\ function)
                    echo function
                    ;;
                *\ reserved\ word)
                    echo keyword
                    ;;
                *)
                    echo file
                    ;;
            esac
            unset t
        }
        ;;
    *)
        # assume something vaguely Bourne-ish
        set -o vi
        typeof()
        {
            if [ $# -ne 1 ]
            then
                echo 'usage: typeof <name>' >&2
                return 1
            fi
            t="$(type "$1" 2>/dev/null 1| head -1)"
            case "$t" in
                '')
                    echo undefined
                    ;;
                *\ aliased\ *)
                    echo alias
                    ;;
                *\ builtin)
                    echo builtin
                    ;;
                *\ function)
                    echo function
                    ;;
                *\ reserved\ word)
                    echo keyword
                    ;;
                *)
                    echo file
                    ;;
            esac
            unset t
        }
        ;;
esac

if [ "$(typeof chdir)" = 'undefined' ]
then
    chdir()
    {
        command cd "$@"
    }
fi

_copyright_style()
{
    case "$1" in
        [cC]|*.c|*.h)
            echo c      ;;
        [cC][cC]|[cC][pP][pP]|*.cc|*.C|*.cpp|*.hh|*.H|*.hpp)
            echo cc     ;;
        erl|*.erl|*.hrl)
            echo erl    ;;
        sh|*.mk|*.*sh|Makefile)
            echo sh     ;;
        [sS][qQ][lL]|[dD][dD][lL]|*.[sS][qQ][lL]|*.[dD][dD][lL])
            echo sql    ;;
    esac
}
_copyright_prefix()
{
    case "$1" in
        c)
            echo ' *'   ;;
        cc)
            echo '//'   ;;
        erl)
            echo '%%'   ;;
        sh)
            echo '#'    ;;
        sql)
            echo '--'   ;;
    esac
}
_copyright_owner()
{
    __cpy_own_dir=''
    __cpy_own_val=''
    case "$1" in
        [bB]asho*)
            __cpy_own_val='basho'
            ;;
        T*Burghart)
            __cpy_own_val='trb'
            ;;
        ''|-|.)
            __cpy_own_dir="$(pwd)"
            ;;
        ..)
            __cpy_own_dir="$(cd .. && pwd)"
            ;;
        *)
            if [[ -d "$1" ]]
            then
                __cpy_own_dir="$(cd "$1" && pwd)"
            elif [[ "$1" == */* && -d "$(dirname "$1")" ]]
            then
                __cpy_own_dir="$(cd "$(dirname "$1")" && pwd)"
            else
                __cpy_own_dir="$(pwd)"
            fi
    esac
    if [[ -z "$__cpy_own_val" ]]
    then
        if [[ -n "$BASHO_PRJ_BASE" \
            && "$__cpy_own_dir/" == "$BASHO_PRJ_BASE/"* ]]
        then
            __cpy_own_val='basho'
        elif [[ -n "$TRB_PRJ_BASE" \
            && "$__cpy_own_dir/" == "$TRB_PRJ_BASE/"* ]]
        then
            __cpy_own_val='trb'
        else
            __cpy_own_val="${LOGNAME:-${USER:-$(id -un)}}"
        fi
    fi
    case "$__cpy_own_val" in
        ted|trb)
            echo 'T. R. Burghart'
            ;;
        *)
            echo "$__cpy_own_val"
            ;;
    esac
    unset   __cpy_own_dir __cpy_own_val
}

# copyright [path] [prefix]
copyright()
{
    __cpy_bad=''
    __cpy_cnt='0'
    __cpy_pre=''
    __cpy_ret='0'
    __cpy_sty=''
    __cpy_tgt=''
    __cpy_who=''
    __cpy_unset='__cpy_bad __cpy_cnt __cpy_pre __cpy_ret __cpy_sty __cpy_tgt __cpy_who'

    while [[ $# -gt 0 ]]
    do
        case "$1" in
            -h|--help)
                __cpy_ret='1'
                ;;
            -o|--owner)
                if [[ $# -gt 1 ]]
                then
                    shift
                    __cpy_who="$1"
                else
                    __cpy_bad+=' owner'
                fi
                ;;
            -p|--pre|--prefix)
                if [[ $# -gt 1 ]]
                then
                    shift
                    __cpy_pre="$1"
                else
                    __cpy_bad+=' prefix'
                fi
                ;;
            -s|--sty|--style)
                if [[ $# -gt 1 ]]
                then
                    shift
                    __cpy_sty="$(_copyright_style "$1")"
                    if [[ -z "$__cpy_sty" ]]
                    then
                        __cpy_bad+=" style='$1'"
                    fi
                else
                    __cpy_bad+=' style'
                fi
                ;;
            -*)
                __cpy_bad+=" $1"
                ;;
            *)
                if [[ -n "$__cpy_tgt" ]]
                then
                    __cpy_bad+=" $1"
                elif [[ -z "$__cpy_pre" && -z "$__cpy_sty" \
                    && -z "$__cpy_tgt" && "$1" != *[./]* ]]
                then
                    __cpy_sty="$(_copyright_style "$1")"
                    if [[ -z "$__cpy_sty" ]]
                    then
                        __cpy_tgt="$1"
                    fi
                else
                    __cpy_tgt="$1"
                fi
                ;;
        esac
        shift
    done
    if [[ $__cpy_cnt -eq 0 ]]
    then
        __cpy_out[0]='-'
    fi
    if [[ -n "$__cpy_bad" ]]
    then
        echo    "error: bad argument(s):$__cpy_bad" >&2
        __cpy_ret='2'
    fi
    if [[ $__cpy_ret -ne 0 ]]
    then
        echo    'usage: copyright [-h] [-o owner] [-p prefix] [-s style] [style] [path]' >&2
        echo    'note: if neither of style or prefix is explicitly set AND the first non-switch'
        echo    '      parameter contains neither of [./] AND it matches a known style it will' >&2
        echo    '      be treated as such' >&2
        unset   $__cpy_unset __cpy_unset
        return  $__cpy_ret
    fi
    if [[ -z "$__cpy_who" ]]
    then
        __cpy_who="$(_copyright_owner "$__cpy_tgt")"
    fi
    if [[ -z "$__cpy_sty" ]]
    then
        __cpy_sty="$(_copyright_style "${__cpy_tgt##*/}")"
    fi
    if [[ -z "$__cpy_pre" ]]
    then
        __cpy_pre="$(_copyright_prefix "$__cpy_sty")"
    fi
    case "$__cpy_sty" in
        c)
            printf '%s\n' '/*'
            ;;
    esac
    case "$__cpy_who" in
        basho)
            __cpy_ln='-------------------------------------------------------------------'
            printf '%s %s\n' "$__cpy_pre" "$__cpy_ln"
            printf '%s\n' "$__cpy_pre"
            printf '%s Copyright (c) %u Basho Technologies, Inc.\n' "$__cpy_pre" "$(date '+%Y')"
            printf '%s\n' "$__cpy_pre"
            printf '%s This file is provided to you under the Apache License,\n' "$__cpy_pre"
            printf '%s Version 2.0 (the "License"); you may not use this file\n' "$__cpy_pre"
            printf '%s except in compliance with the License.  You may obtain\n' "$__cpy_pre"
            printf '%s a copy of the License at\n' "$__cpy_pre"
            printf '%s\n' "$__cpy_pre"
            printf '%s   http://www.apache.org/licenses/LICENSE-2.0\n' "$__cpy_pre"
            printf '%s\n' "$__cpy_pre"
            printf '%s Unless required by applicable law or agreed to in writing,\n' "$__cpy_pre"
            printf '%s software distributed under the License is distributed on an\n' "$__cpy_pre"
            printf '%s "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n' "$__cpy_pre"
            printf '%s KIND, either express or implied.  See the License for the\n' "$__cpy_pre"
            printf '%s specific language governing permissions and limitations\n' "$__cpy_pre"
            printf '%s under the License.\n' "$__cpy_pre"
            printf '%s\n' "$__cpy_pre"
            printf '%s %s\n' "$__cpy_pre" "$__cpy_ln"
            ;;
        *)
            __cpy_ln='========================================================================'
            printf '%s %s\n' "$__cpy_pre" "$__cpy_ln"
            printf '%s Copyright (c) %u %s\n' "$__cpy_pre" "$(date '+%Y')" "$__cpy_who"
            printf '%s\n' "$__cpy_pre"
            printf '%s Permission to use, copy, modify, and/or distribute this software for any\n' "$__cpy_pre"
            printf '%s purpose with or without fee is hereby granted, provided that the above\n' "$__cpy_pre"
            printf '%s copyright notice and this permission notice appear in all copies.\n' "$__cpy_pre"
            printf '%s\n' "$__cpy_pre"
            printf '%s THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n' "$__cpy_pre"
            printf '%s WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n' "$__cpy_pre"
            printf '%s MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n' "$__cpy_pre"
            printf '%s ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n' "$__cpy_pre"
            printf '%s WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n' "$__cpy_pre"
            printf '%s ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n' "$__cpy_pre"
            printf '%s OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n' "$__cpy_pre"
            printf '%s %s\n' "$__cpy_pre" "$__cpy_ln"
            ;;
    esac
    case "$__cpy_sty" in
        c)
            printf '%s\n' ' */'
            ;;
    esac
    unset   $__cpy_unset __cpy_unset
}

# Find Here Or Above
fhoa()
{
    if [[ $# -lt 1 ]]
    then
        echo 'usage: fhoa <name> [<highest-dir>]' >&2
        return 1
    fi
    if [[ -e "$1" ]]
    then
        echo "$(pwd)/$1"
        return 0
    fi
    if [[ -n "$2" ]]
    then
        if [[ ! -d "$2" ]]
        then
            echo "error: fhoa: '$2' is not a directory"
            return 1
        fi
        t="$(cd "$2" && pwd)"
    else
        t="$HOME"
    fi
    c="$(pwd)"
    if [[ "$c" != "$t" && "${c#${t}/}" = "$c" ]]
    then
        unset c t
        return 2
    fi
    while true
    do
        if [[ -e "$c/$1" ]]
        then
            echo "$c/$1"
            unset c t
            return 0
        fi
        if [[ "$c" = "$t" ]]
        then
            break
        fi
        c="${c%/*}"
    done
    unset c t
    return 2
}

isvar()
{
    if [[ $# -ne 1 ]]
    then
        echo 'usage: isvar <name>' >&2
        return 1
    fi
    case "$(eval echo "\$$1")" in
        \$ | '' )
            if set | grep -q "^$1="
            then
                return 0
            else
                return 1
            fi
            ;;
        * )
            return 0
            ;;
    esac
}

[[ -n "$lenv_file" ]] || readonly lenv_file='env'

lenm()
{
    if [[ -n "$lenv_label" ]]
    then
        echo $lenv_label
    elif [[ -n "$lenv_current" ]]
    then
        basename "$lenv_current"
    fi
}

_reset_lenv()
{
    case "$(typeof reset_lenv)" in
        undefined )
            if [[ -n "$reset_lenv" ]]
            then
                $reset_lenv
                unset reset_lenv
            fi
            ;;
        file )
            . reset_lenv
            ;;
        alias )
            reset_lenv
            unalias reset_lenv 2>/dev/null || true
            ;;
        function )
            reset_lenv
            unset -f reset_lenv 2>/dev/null || true
            ;;
        * )
            reset_lenv
            ;;
    esac
    unset lenv_current 2>/dev/null || true
}

lenv()
{
    lenv_target="$(fhoa $lenv_file 2>/dev/null || true)"
    _reset_lenv
    if [[ -n "$lenv_aliases" ]]
    then
        unalias $lenv_aliases 2>/dev/null
        unset lenv_aliases
    fi
    [[ -z "$lenv_envvars" ]] || unset $lenv_envvars lenv_envvars
    env_ss_format="$env_ss_format_default"

    if [[ -f "$lenv_target" ]]
    then
        lenv_current="${lenv_target%/*}"
        . "$lenv_target"
        lenv_result=$?
        unset $env_local_unset env_local_unset \
            $(set | $ESED -n 's/^(local_[[:alnum:]_]+)=.*$/\1/p' | tr '\n' ' ') \
            2>/dev/null
        [[ $lenv_result -eq 0 ]] || _reset_lenv
        # If the script set a reset function be sure to invoke it on failure.
        # We'll still follow up with a default version just to be sure
        # everything's cleaned up.
        if [[ "$(typeof reset_lenv)" == undefined && -z "$reset_lenv" ]]
        then
            reset_lenv()
            {
                [[ "$(typeof kerl_deactivate)" == 'undefined' ]] || kerl_deactivate

                if [[ -n "$env_reset_path" ]]
                then
                    PATH="$env_reset_path"
                    unset env_reset_path
                    export PATH
                    hash -r
                fi
                if [[ -n "$env_reset_unalias" ]]
                then
                    unalias $env_reset_unalias 2>/dev/null
                    unset env_reset_unalias
                fi
                if [[ -n "$env_reset_unsetf" ]]
                then
                    unset -f $env_reset_unsetf 2>/dev/null
                    unset env_reset_unsetf
                fi
                [[ -z "$env_reset_unset" ]] || unset $env_reset_unset env_reset_unset

                env_ss_format="$env_ss_format_default"
                unset -f reset_lenv
            }
        fi
        if [[ $lenv_result -ne 0 ]]
        then
            _reset_lenv
        else
            echo loaded environment from "'$lenv_current'"
        fi
        unset lenv_result
    else
        [[ -z "$lenv_current" ]] || unset lenv_current
    fi
    unset lenv_target
}

cdl()
{
    chdir "$@" || return $?
    lenv
}

newscr()
{
    if [[ $# -ne 2 ]]
    then
        echo    'usage: newscr interpretter target-file' >&2
        return  1
    fi
    if [[ -e "$2" ]]
    then
        echo    "error: newscr: '$2' already exists!" >&2
        return  1
    fi
    if [[ "$1" == 'escript' || "$1" == 'erl' ]]
    then
        s='escript'
    else
        for s in "/bin/$1" "/usr/bin/$1" \
            "$(which "$1" 2>/dev/null)" "/usr/bin/env $1"
        do
            [[ -z "$s" || ! -f "$s" || ! -x "$s" ]] || break
        done
    fi
    e="$(/usr/bin/touch "$2" 2>&1)"
    if [[ -n "$e" ]]
    then
        echo    "error: newscr: ${e#touch: }" >&2
        unset   e s
        return  1
    fi
    case "${s##*/}" in
        escript )
            printf '#!/usr/bin/env escript\n' > "$2"
            printf '%%%% -*- mode: erlang; erlang-indent-level: 4; indent-tabs-mode: nil -*-\n' >> "$2"
            printf '%%%%! -smp enable +K true -sname %s\n' "${2##*/}" >> "$2"
            copyright erl "$2" >> "$2"
            printf '\nmain(Args) ->\n    ok.\n' >> "$2"
            ;;
        bash | ksh | sh | zsh )
            printf '#!%s -e\n' "$s" > "$2"
            copyright sh "$2" >> "$2"
            printf '\n' >> "$2"
            printf 'readonly  rdir="$(pwd)"\n' >> "$2"
            printf 'readonly  sdir="$(cd "$(dirname "$0")" && pwd)"\n' >> "$2"
            printf 'readonly  sname="${0##*/}"\n' >> "$2"
            printf 'readonly  spath="$sdir/$sname"\n' >> "$2"
            printf '\nset -x\n' >> "$2"
            ;;
        * )
            printf '#!%s\n' "$s" > "$2"
            ;;
    esac
    printf '\n\n' >> "$2"
    /bin/chmod +x "$2"
}

giga()
{
    d="$(pwd)"
    if [[ "$d" = "$HOME" ]]
    then
        "$MATE" ~/.gitignore_global
    else
        if [[ "$d" != "${d#${HOME}/}" ]]
        then
            while [[ "$d" != "$HOME" ]]
            do
                if [[ -f "$d/.gitignore" ]]
                then
                    "$MATE" -m "$(basename "$d") .gitignore" "$d/.gitignore"
                    unset d
                    return 0
                fi
                d="${d%/*}"
            done
            "$MATE" ~/.gitignore_global
        fi
    fi
    unset d
}

dirpath()
{
    if [[ $# -ne 1 ]]
    then
        echo 'usage: dirpath <filesystem-path>' >&2
        return 1
    fi
    if [[ -d "$1" ]]
    then
        d="$1"
    else
        d="$(dirname "$1")"
    fi
    case "$d" in
        '.' )
            pwd
            ;;
        '..' )
            dirname "$(pwd)"
            ;;
        * )
            (cd "$d" && pwd)
            ;;
    esac
    unset d
}

m()
{
    if [[ $# -eq 0 ]]
    then
        "$MATE"
    else
        for n in "$@"
        do
            "$MATE" -m "$(basename "$(dirpath "$n")") $(basename "$n")" "$n"
        done
        unset n
    fi
}

if [[ -n "$LOCAL_ENV_DIR" && -d "$LOCAL_ENV_DIR/.." ]]
then
    alias le="cd $LOCAL_ENV_DIR/.."
fi

# SSH
alias aws-scp='/usr/bin/scp -p -i /Users/ted/.aws/aws.ssh.1.pem'
alias aws-ssh='/usr/bin/ssh -R 52698:localhost:52698 -i /Users/ted/.aws/aws.ssh.1.pem'
alias chimera='/usr/bin/ssh -R 52698:localhost:52698 -l root chimera'
alias gramma='/usr/bin/ssh -R 52698:localhost:52698 -l root -p 22032 gramma'
alias tshome='/usr/bin/ssh -R 52698:localhost:52698 -p 22007 tshome'

# Stuff
alias remake="$MAKE clean && $MAKE"
alias dircp='/bin/pax -rw -pe -X'
alias rtconf="m ~/.riak_test.config"
alias shconf="m ~/.shrc"
alias shrc=". ~/.shrc"
alias b="cd $BASHO_PRJ_BASE"
alias e="$MATE"
alias t="cd $TRB_PRJ_BASE"

# Idea IDE(s)
__shrc_ideajdks="$(/bin/ls -1d \
    ~/Library/Preferences/IdeaIC*/options/jdk.table.xml 2>/dev/null \
    | tail -1)"
if [[ -n "$__shrc_ideajdks" && -f "$__shrc_ideajdks" ]]
then
    alias ideaerls="m $__shrc_ideajdks"
    alias ideadirs="/usr/bin/find ~/prj -type d -name .idea && echo $__shrc_ideajdks"
fi
unset __shrc_ideajdks

# Dates
alias utcs="date '+%s'"
# BSD and GNU versions of 'date' use different options, try both
d2utcs()
{
    date -jf '%a %b %d %T %Z %Y' "$*" '+%s' 2>/dev/null \
    || date "--date=$*" '+%s'
}
utcs2d()
{
    date -jf '%s' "$*" 2>/dev/null \
    || date "--date=@$*"
}

# Scripts
alias newbash='newscr bash'
alias newes='newscr escript'
alias newksh='newscr ksh'
alias newsh='newscr sh'
alias newzsh='newscr zsh'

# Ruby Path to Enlightenment
alias rp="cd $HOME/prj/ruby/koans && ruby path_to_enlightenment.rb"

# git
alias g="$GIT"
alias ga="$GIT add"
alias gaa="$GIT add -A"
alias gb="$GIT branch"
alias gci="$GIT commit"
alias gco="$GIT checkout"
alias gd="$GIT diff"
alias gds="$GIT describe"
alias gigg="m $HOME/.gitignore_global"
alias gl="$GIT log"
alias glr="$GIT log -n 2"
alias gpull="$GIT pull"
alias gpush="$GIT push"
alias gr="$GIT remote"
alias gs="$GIT status"
alias gt="$GIT tag"

gcl()
{
    if [[ $# -eq 0 ]]
    then
        echo 'Usage: gcl [-b branch] [args --] repo [directory]' >&2
        echo '  repo: basho-repo-name | github-org/repo | git-url' >&2
        return 1
    fi
    local -a args=("$@")
    local -i argc="${#args[@]}"
    local -i argx=0 urlx=0
    while [[ $argx -lt $argc ]]
    do
        if [[ "${args[$argx]}" == '--' ]]
        then
            let 'urlx = (argx + 1)'
            break
        fi
        let 'argx += 1'
    done
    if [[ $urlx -le $argx ]]
    then
        if [[ "${args[0]}" == '-b' ]]
        then
            argx=2
        else
            argx=0
        fi
        if [[ "${args[$argx]}" == -* ]]
        then
            echo 'Error: non-obvious switch, use -- or invoke directly.' >&2
            return 1
        else
            urlx=$argx
        fi
    fi
    local url="${args[$urlx]}"
    case "$url" in
        https:*|ssh:*|git:*|git@*)
            if [[ "$1" != *.git ]]
            then
                url="$url.git"
            fi
            ;;
        */*)
            url="https://github.com/$url.git"
            ;;
        *)
            url="https://github.com/basho/$url.git"
            ;;
    esac
    args[$urlx]="$url"
    $GIT clone "${args[@]}"
}

gscrub()
{
    local arg
    for arg in "$@"
    do
        case "$arg" in
            -h|--help)
                echo 'Usage: gscrub [-ifnq] [-e <pattern>]' >&2
                echo 'Scrubs the current git repository without mercy!' >&2
                echo "Parameters are passed to 'git clean' unmodified" >&2
                echo "Note that '-f' is already included, adding it a second time will wipe lower-level repos (deps)" >&2
                return 1
            ;;
        esac
    done
    if [[ ! -d '.git' ]]
    then
        echo "gscrub: error: not at the top of a git repo" >&2
        return 2
    fi
    unset REPLY
    printf 'Are you SURE you want to remove all untracked files under\n\t%s?\n' "$(pwd)"
    while read -p '[y/n]: '
    do
        case "$REPLY" in
            [yY]|[yY][eE][sS])
                break
                ;;
            [nN]|[nN][oO])
                return 0
                echo 'when you change your mind, use:'
                echo "$GIT clean -fdqx -e /env -e /env.local -e /.idea/ -e '*.iml' -e '/*.txt'"
                ;;
        esac
    done
    $GIT clean -fdqx -e /env -e /env.local -e /.idea/ -e '*.iml' -e '/*.txt' "$@"
}

gti()
{
    if [[ $# -ne 1 ]]
    then
        echo 'Usage: gti <exactly-one-tag>' >&2
        return 1
    fi
    local ref
    local ret
    local tmp
    ref="$($GIT rev-parse "$1")"
    ret=$?
    if [[ $ret -eq 0 ]]
    then
        tmp="$(mktemp '/tmp/gt.XXXXXXX')"
        $GIT cat-file -p "$ref" >> "$tmp"
        ref="$(awk '/^tagger[[:space:]]/ {print $(NF-1), $(NF)}' "$tmp")"
        # BSD and GNU versions of 'date' use different options, try both
        ref="$(date -jf '%s' "${ref%% *}" '+%Y-%m-%d %H:%M:%S' 2>/dev/null \
            || date "--date=@${ref%% *}" '+%Y-%m-%d %H:%M:%S') ${ref##* }"
        printf '%s\t%s\n' "$1" "$ref"
        cat "$tmp"
        rm "$tmp"
    fi
    return $ret
}

gy()
{
    if [[ $# -ne 1 ]]
    then
        echo 'Usage: gy <exactly-one-file-path>' >&2
        return 1
    fi
    local cwd="$(pwd)"
    cd "$(dirname "$1")" && \
    $GIT log '--date=format:%Y' '--format=%ad' '--' "$(basename "$1")" \
    | sort -u
    cd "$cwd"
}

# Erlang
alias r15=". $LOCAL_OTP_DIR/otp-15/activate"
alias r16=". $LOCAL_OTP_DIR/otp-16/activate"
alias r17=". $LOCAL_OTP_DIR/otp-17/activate"
alias r18=". $LOCAL_OTP_DIR/otp-18/activate"
alias r19=". $LOCAL_OTP_DIR/otp-19/activate"
alias r20=". $LOCAL_OTP_DIR/otp-20/activate"
alias unkerl='kerl_deactivate'
alias we='whence erl'

if [[ -f "$TRB_PRJ_BASE/basho/erl_stuff/src/rebar_deps.erl" ]]
then
    alias rdeps="escript $TRB_PRJ_BASE/basho/erl_stuff/src/rebar_deps.erl"
fi

rth()
{
    local file='.thumbs.yml'
    if [[ ! -f "$file" ]]
    then
        echo No Thumbs file >&2
        return 2
    fi
    local -a cmds
    local temp="$(mktemp /tmp/tt.XXXXXXX)"
    $ESED -n \
        "s/^[[:space:]]+-[[:space:]]+(.+)[[:space:]]*\$/cmds[\${#cmds[@]}]='\\1'/p" \
        "$file" > "$temp"
    . "$temp"
    /bin/rm "$temp"
    local cmd
    for cmd in "${cmds[@]}"
    do
        printf '>> %s\n' "$cmd"
        $cmd
        local ret=$?
        [[ $ret -eq 0 ]] || return $ret
    done
}
alias rclean='/bin/rm -rf ebin _build .rebar .rebar3 .eunit rebar.lock'
alias rtha='for n in 16 17 18 19 ; do . $LOCAL_OTP_DIR/otp-$n/activate ; rclean ; rth || break ; done'
alias rthax='for n in 16 17 18 19 20 ; do . $LOCAL_OTP_DIR/otp-$n/activate ; rclean ; rth || break ; done'

lel()
{
    if [[ -n "$env_reset_unset" ]]
    then
        env | $EGREP "^($(echo $(printf '%s\n' $env_reset_unset \
            | $EGREP '^[[:upper:]]' | sort -u) | tr ' ' '|'))" | sort
    fi
}

_shrc_cmd_files()
{
    if [[ -n "$LOCAL_ENV_DIR" ]]
    then
        __scf_le="${LOCAL_ENV_DIR%/*}"
        __scf_wd="$(pwd)"
        if [[ "$__scf_wd/" == "$__scf_le/"* ]]
        then
            /bin/ls $__scf_le/home/shrc \
                $__scf_le/root/usr/local/etc/sh.* \
                $__scf_le/root/$(uname -s \
                    | tr '[A-Z]' '[a-z]')/usr/local/etc/sh.* \
                2>/dev/null
            unset __scf_le __scf_wd
            return 0
        fi
        unset __scf_le __scf_wd
    fi
    /bin/ls $HOME/.shrc /usr/local/etc/sh.* 2>/dev/null || true
}
shrc_cmd_names()
{
    __scn_re='s/^[[:space:]]*(alias[[:space:]]+([[:alnum:]_-]+)=.*|([[:alnum:]][[:alnum:]_]*)\(\)[[:space:]]*)$/\2\3/p'
    if [[ $# -gt 0 ]]
    then
        cat "$@" | $ESED -n "$__scn_re" | sort -u
    else
        cat $(_shrc_cmd_files) | $ESED -n "$__scn_re" | sort -u
    fi
    unset __scn_re
}
shrc_cmds()
{
    printf "    printf \"\$env_ss_format\" '%s' ''\\n" $(shrc_cmd_names "$@")
}
shrc_missing()
{
    if [[ $# -gt 0 ]]
    then
        __sm_fl="$*"
    else
        __sm_fl="$(_shrc_cmd_files)"
    fi
    __sm_pf="    printf \"\$env_ss_format\" '%s' ''\\n"
    S='[:space:]'
    for __sm_cn in $(shrc_cmd_names $__sm_fl)
    do
        if ! $EGREP -q \
            "^[$S]+printf[$S]+\"\\\$env_ss_format\"[$S]+'$__sm_cn'[$S]+" \
            $__sm_fl
        then
            printf "$__sm_pf" "$__sm_cn"
        fi
    done
    unset __sm_fl __sm_pf S
}
shrc_longest()
{
    __sl_ln=0
    __sl_lc=''
    for __sl_cn in $(shrc_cmd_names "$@")
    do
        __sl_cl="${#__sl_cn}"
        if [[ $__sl_cl -gt $__sl_ln ]]
        then
            __sl_ln=$__sl_cl
            __sl_lc="$__sl_cn"
        fi
    done
    printf "longest command '%s': %u\\n" "$__sl_lc" $__sl_ln
    unset __sl_cl __sl_cn __sl_lc __sl_ln
}

# s/ss format
env_ss_format_format="    %%-%us %%s\\\\n"
env_ss_length_default=15
env_ss_format_default="$(printf "$env_ss_format_format" $env_ss_length_default)"
env_ss_format="$env_ss_format_default"

ss()
{
    printf "$env_ss_format" 'aws-scp' 'scp with aws identity'
    printf "$env_ss_format" 'aws-ssh' 'ssh with aws identity & rmate port'
    printf "$env_ss_format" 'chimera' 'ssh to chimera with rmate port'
    printf "$env_ss_format" 'gramma' 'ssh to gramma with rmate port'
    printf "$env_ss_format" 'tshome' 'ssh to tshome with rmate port'
    printf "$env_ss_format" 'scp' 'scp -p'
    echo ''
    printf "$env_ss_format" 'la' 'ls -lhA'
    printf "$env_ss_format" 'lat' 'ls -lhAtr'
    printf "$env_ss_format" 'lh' 'ls -lhH'
    printf "$env_ss_format" 'll' 'ls -lh'
    printf "$env_ss_format" 'lla' 'ls -lh + EAs'
    printf "$env_ss_format" 'lld' 'ls -lhd'
    printf "$env_ss_format" 'llf' 'ls -lh + flags'
    printf "$env_ss_format" 'lll' 'ls -lh + flags & EAs'
    printf "$env_ss_format" 'lr' 'ls -lhR'
    printf "$env_ss_format" 'lt' 'ls -lhtr'
    echo ''
    printf "$env_ss_format" 'g' 'git'
    printf "$env_ss_format" 'ga' 'git add'
    printf "$env_ss_format" 'gaa' 'git add -A'
    printf "$env_ss_format" 'gb' 'git branch'
    printf "$env_ss_format" 'gci' 'git commit'
    printf "$env_ss_format" 'gcl' 'git clone'
    printf "$env_ss_format" 'gco' 'git checkout'
    printf "$env_ss_format" 'gd' 'git diff'
    printf "$env_ss_format" 'gds' 'git describe'
    printf "$env_ss_format" 'giga' 'edit active gitignore'
    printf "$env_ss_format" 'gigg' 'edit global gitignore'
    printf "$env_ss_format" 'gl' 'git log'
    printf "$env_ss_format" 'glr' 'git log recent'
    printf "$env_ss_format" 'gpull' 'git pull'
    printf "$env_ss_format" 'gpush' 'git push'
    printf "$env_ss_format" 'gr' 'git remote'
    printf "$env_ss_format" 'gs' 'git status'
    printf "$env_ss_format" 'gscrub' 'scrub the current git repository without mercy!'
    printf "$env_ss_format" 'gt' 'git tag'
    printf "$env_ss_format" 'gti' '<tag>  list info about one tag'
    printf "$env_ss_format" 'gy' '<path>  list commit years of one file'
    echo ''
    printf "$env_ss_format" 'b' 'cd ~/prj/basho'
    printf "$env_ss_format" 't' 'cd ~/prj/tedb'
    printf "$env_ss_format" 'e' 'edit'
    printf "$env_ss_format" 'm' 'mate -m ...'
    echo ''
    printf "$env_ss_format" 'r15' 'activate erlang R15..basho-current'
    printf "$env_ss_format" 'r16' 'activate erlang R16..basho-current'
    printf "$env_ss_format" 'r17' 'activate erlang OTP-17..basho-current'
    printf "$env_ss_format" 'r18' 'activate erlang OTP-18..basho-current'
    printf "$env_ss_format" 'r19' 'activate erlang OTP-19..basho-current'
    printf "$env_ss_format" 'r20' 'activate erlang OTP-20..basho-current'
    printf "$env_ss_format" 'we' 'whence erl'
    printf "$env_ss_format" 'unkerl' 'kerl_deactivate'
    printf "$env_ss_format" 'rclean' 'delete rebar2/3 artifacts in the current directory'
    printf "$env_ss_format" 'rth' 'run all steps in the .thumbs.yml file in the current directory with the current OTP'
    printf "$env_ss_format" 'rtha' 'run all steps in the .thumbs.yml file in the current directory with OTP 16-GA'
    printf "$env_ss_format" 'rthax' 'run all steps in the .thumbs.yml file in the current directory with OTP 16-RC'
    echo ''
    printf "$env_ss_format" 'chdir' 'same as cd'
    printf "$env_ss_format" 'copyright' '[path] [prefix|style]  write a copyright header to stdout'
    printf "$env_ss_format" 'd2utcs' '<DateTime>  parse default time string to UTC seconds'
    printf "$env_ss_format" 'df' 'df -h'
    printf "$env_ss_format" 'dircp' 'copy directory with pax'
    printf "$env_ss_format" 'dirpath' 'echo the fully-qualified directory name of the argument'
    if [[ "$(typeof dscl)" != 'undefined' ]]
    then
        printf "$env_ss_format" 'dscl' 'dscl -raw .'
    fi
    printf "$env_ss_format" 'ecp' 'cp -p without EAs'
    printf "$env_ss_format" 'egrep' 'grep with EREs'
    printf "$env_ss_format" 'esed' 'sed with EREs'
    printf "$env_ss_format" 'fhoa' '<name> [<highest-dir>]  locate $name in pwd up to highest/$HOME'
    if [[ "$(typeof ideadirs)" != 'undefined' ]]
    then
        printf "$env_ss_format" 'ideadirs' 'list idea project and preferences directories'
        printf "$env_ss_format" 'ideaerls' 'edit idea Erlang (JDK) table'
    fi
    printf "$env_ss_format" 'isvar' 'is argument an environment variable'
    if [[ "$(typeof lchflags)" != 'undefined' ]]
    then
        printf "$env_ss_format" 'lchflags' 'chflags -h'
    fi
    printf "$env_ss_format" 'ldd' 'list dynamic lib dependencies'
    printf "$env_ss_format" 'newbash' '<path>  create a bash executable script'
    printf "$env_ss_format" 'newes' '<path>  create an escript executable script'
    printf "$env_ss_format" 'newksh' '<path>  create a ksh executable script'
    printf "$env_ss_format" 'newscr' '<interpretter> <path>  create an executable script'
    printf "$env_ss_format" 'newsh' '<path>  create a sh executable script'
    printf "$env_ss_format" 'newzsh' '<path>  create a zsh executable script'
    if [[ "$(typeof pldump)" != 'undefined' ]]
    then
        printf "$env_ss_format" 'pldump' '<path>  dump plist file as xml'
    fi
    if [[ "$(typeof rdeps)" != 'undefined' ]]
    then
        printf "$env_ss_format" 'rdeps' '[-h|options]  write rebar dependencies'
    fi
    printf "$env_ss_format" 'remake' 'make clean && make'
    printf "$env_ss_format" 'rp' 'ruby tutorial'
    printf "$env_ss_format" 'rtconf' 'edit riak_test config'
    printf "$env_ss_format" 'typeof' 'type of command argument is interpretted as'
    if [[ "$(typeof unhide)" != 'undefined' ]]
    then
        printf "$env_ss_format" 'unhide' 'chflags -h nohidden'
    fi
    printf "$env_ss_format" 'utcs' 'print current time as UTC seconds'
    printf "$env_ss_format" 'utcs2d' '<UtcSecs>  print default time string'
    if [[ "$(typeof wget)" == 'alias' ]]
    then
        printf "$env_ss_format" 'wget' 'curl --remote-name-all'
    fi
    printf "$env_ss_format" 'whence' 'ksh-like whence'
    printf "$env_ss_format" 'whereis' 'find all instances of command'
    echo ''
    printf "$env_ss_format" 'cdl' 'cd && lenv'
    printf "$env_ss_format" 'lel' 'List Exported Local environment variables'
    printf "$env_ss_format" 'lenm' 'display loaded custom environment name or path'
    printf "$env_ss_format" 'lenv' '[re]load custom environment for current or parent directory'
    printf "$env_ss_format" 'reset_lenv' 'unload current custom environment'
    printf "$env_ss_format" 'sss' 'display environment maintenance commands'
    printf "$env_ss_format" 'ss' 'display global environment commands'
    if [[ "$(typeof s)" != 'undefined' ]]
    then
        printf "$env_ss_format" 's' 'display custom environment commands'
    fi
    echo ''
}

sss()
{
    if [[ "$(typeof le)" != 'undefined' ]]
    then
        printf "$env_ss_format" 'le' 'cd local environment base directory'
    fi
    printf "$env_ss_format" 'shrc_cmd_names' '[files ...]  list all environment command names'
    printf "$env_ss_format" 'shrc_cmds' '[files ...]  list all potential s/ss entries'
    printf "$env_ss_format" 'shrc_longest' '[files ...]  calculate longest environment command name length'
    printf "$env_ss_format" 'shrc_missing' '[files ...]  list missing s/ss entries'
    printf "$env_ss_format" 'shconf' 'edit shell rc'
    printf "$env_ss_format" 'shrc' 'reload shell rc'
}
