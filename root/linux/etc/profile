#!/usr/bin/false This file is meant to be sourced
# ========================================================================
# Copyright (c) 1994-2016 T. R. Burghart.
# 
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
# 
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
# ========================================================================
#
# System-wide profile for Bourne-ish shells on Linux.
#
# This needs to work for sh, bash, ksh, and zsh, though zsh handles sourcing
# the shrc file on its own.
#

if [ -z "$EUID" ]
then
    EUID="$(/usr/bin/id -u)"
fi
if [ -z "$UID" ]
then
    UID="$(/usr/bin/id -ru)"
fi
if [ -z "$LOGNAME" ]
then
    if [ -n "$USER" ]
    then
        LOGNAME="$USER"
    else
        LOGNAME="$(/usr/bin/id -un)"
    fi
fi
if [ -z "$USER" ]
then
    USER="$LOGNAME"
fi
MAIL="/var/spool/mail/$(/usr/bin/id -un)"

HOSTNAME="$(/usr/bin/hostname 2>/dev/null)"

# pathmunge is an abomination, just be smart
# system /sbin should ALWAYS come before local variants for the superuser, but
# normal users may want local overrides first, which makes it easier anyway
for __prf_d in /usr/local/sbin /sbin
do
    case "$PATH" in
        *:$__prf_d:*|$__prf_d:*|*:$__prf_d)
            ;;
        *)
            if [ "$EUID" = "0" ]
            then
                PATH="$__prf_d:$PATH"
            else
                PATH="$PATH:$__prf_d"
            fi
            ;;
    esac
done
unset __prf_d

export HOSTNAME LOGNAME MAIL PATH USER

#
# below here *should* be common accross platforms
#

# some platforms default to being lenient with non-system umasks, but I'm not
umask 022

# strictly for per-system global environment overrides
if [ -r /usr/local/etc/env.local ]
then
    . /usr/local/etc/env.local
fi

# identify the shell and some features
# - start with shells that may be emulating others
# - $PS1 isn't always a reliable test for an interactive shell, so
#   if the shell has a distinct test, use it
# - theoretically, if this file is being sourced it's a login shell,
#   but confirm if we can
if [ -n "$ZSH_VERSION" ]
then
    __sh_sh=zsh
    if [[ -o interactive ]]
    then
        __sh_interactive=true
    else
        unset __sh_interactive
    fi
    if [[ -o login ]]
    then
        __sh_login=true
    else
        unset __sh_login
    fi
elif [ -n "$BASH_VERSION" ]
then
    __sh_sh=bash
    case "$-" in
        *i*)  __sh_interactive=true   ;;
        *)    unset __sh_interactive  ;;
    esac
    if shopt -q login_shell
    then
        __sh_login=true
    else
        unset __sh_login
    fi
elif [ -n "$KSH_VERSION" ]
then
    __sh_sh=ksh
    if [[ -n "$PS1" ]]
    then
        __sh_interactive=true
    else
        unset __sh_interactive
    fi
    case "$0" in
        -*) __sh_login=true   ;;
        *)  unset __sh_login  ;;
    esac
else
    __sh_sh=sh
    if [ -n "$PS1" ]
    then
        __sh_interactive=true
    else
        unset __sh_interactive
    fi
    case "$0" in
        -*) __sh_login=true   ;;
        *)  unset __sh_login  ;;
    esac
fi

# see if we can assure that $SHELL is set to something sane
if [ -z "$SHELL" -o ! -f "$SHELL" ]
then
    __prf_fn=`basename "$SHELL"`
    if [ "$__prf_fn" != "$__sh_sh" -a "$__prf_fn" != "r$__sh_sh" ]
    then
        for __prf_sh in /bin/$__sh_sh /usr/bin/$__sh_sh `which $__sh_sh 2>/dev/null`
        do
            if [ -f "$__prf_sh" -a -x "$__prf_sh" ]
            then
                SHELL="$__prf_sh"
                export SHELL
                break
            fi
        done
        unset __prf_sh
    fi
    unset __prf_fn
fi

# history management varies by shell, but the recognized variables' are 
# consistent enough that we just set them regardless of the specific shell
HISTCONTROL='erasedups'
HISTFILE="$HOME/.sh_history"
HISTFILESIZE=2048
HISTSIZE=1024
SAVEHIST="$HISTFILESIZE"
export HISTCONTROL HISTFILE HISTFILESIZE HISTSIZE SAVEHIST

if [ -n "$__sh_interactive" ]
then
    if [ $__sh_sh = zsh -a -r /etc/zshrc ]
    then
        # zsh will source the file itself
        true
    elif [ -r /etc/${__sh_sh}rc ]
    then
        . /etc/${__sh_sh}rc
    elif [ -r /etc/shrc ]
    then
        . /etc/shrc
    fi
fi
